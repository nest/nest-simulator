/*
 *  typeinit.sli
 *
 *  This file is part of NEST.
 *
 *  Copyright (C) 2004 The NEST Initiative
 *
 *  NEST is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  NEST is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with NEST.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/*
    SLI Interpeter initalization


*/

%% Initialization of TypeTrie wrappers to
%% builtin functions

/def_ /def load def

/** @BeginDocumentation
Name: def - define a variable or function
Synopsis: /name obj def -> -
          /name [/type1 .. /typen] any def -> -

Description:
def creates an association between /name and obj
in the current dictionary.

First variant:
  The first variant unconditionally creates the association. Any
  existing association will be overwritten.

Second variant:
  The second variant creates a user-defined function with automatic
  parameter checking. The second parameter must be an array of valid
  type-specifiers. The last parameter must be a procedure object. If
  the name is already bound to a trie, the new definition is added
  to the trie, otherwise a trie is created.

  If the array of type-specifiers is empty, it is checked, if there
  already exists a trie for this name. If so, the definition would be
  ambiguous, and an error is raised. If not, the first variant of
  def is called.

  Note that no name binding via bind is performed.

Examples:
SLI ] /a 1 def
SLI ] a =
1

SLI ] /f [/integertype /integertype] {add_ii} def
SLI ] 1 2 f
SLI [1] =
3
SLI ] 1 2.0 f
TypeTrie::lookup error at parameter level 0
Operand      : 2
Operand type : doubletype
Expected type: integertype
Error: /ArgumentType in f
SLI ]  /f [/integertype /doubletype] {add_id} def
SLI ] 1 2.0 f =
2
SLI ] 1 2 f
SLI [1] =
3

Remarks:
Ambiguous type trie definitions are not always detected! Only if the
new parameter list is longer than an existing one, a warning is issued
(but no error is raised). This needs improvement.

Author'sRemark: Maybe the trie variant should be called deffun, like in lisp.

Author: Marc-oliver Gewaltig
SeeAlso: bind, type, Set, undef
*/

%% this is the variant that checks/creates/appends to the type trie:
/:def_
  {%stack: /funcname [/typearray] object

    %if the typearray is empty, we fall back to the original "raw" version of def:
    1 index length 0 eq

    {% the typearray was empty, use "raw" def:
      %stack:  /funcname [/typearray] object

      % check if this name is already bound to a trie
      % if so, definition is ambigouous!
      2 index              % fetch name
      lookup           % check if is already defined
      {% the name is already defined
        % stack: /funcname [/typearray] object lookedupobject
        typeinfo exch pop /trietype eq % as a trie?
        {% Yes, so definition would be ambigouous!
          M_FATAL (def) (Ambiguous function definition!) message
          M_FATAL (def) (A type trie has previously been assigned to this name,) message
          M_FATAL (def) (so there exist variants of this functions expecting parameters.) message
          M_FATAL (def) (A variant not expecting any parameters cannot be assigned!) message
          /def /AmbiguousParameterListError raiseerror
        } if
      } if
      % if we got here, the name was eithe defined, but was no trie,
      % or it is not known, so it will get redefined!
      %stack: /funcname [/typearray] object
      exch pop
      def_       % use original "raw" version of def
    }
    {% the typearray was not empty, do the trie:
      %stack:  /funcname [/typearray] object
      2 index              % fetch name
      dup lookup           % check if is already defined
      {
        typeinfo /trietype neq % as a trie?
        {                      % No, then
          pop trie             % remove the element and create a new trie
        } if
      }
      {          % the name was not yet defined, so
        trie     % create a new trie
      } ifelse
      exch pop   % remove the spare literal object
      3 1 roll   % and bring arguments in right order
      addtotrie
      def_       % use original "raw" Version of def
    } ifelse
  } bind def_

/def trie
  [/literaltype /anytype] /def_ load addtotrie
  [/literaltype /proceduretype] /def load addtotrie
  [/literaltype /arraytype /proceduretype] /:def_ load addtotrie
  [/literaltype /arraytype /anytype] /:def_ load addtotrie
def

/** @BeginDocumentation
Name: trieinfo - print the function variants of a type-trie.
Synopsis: ostream trieinfo -> -
*/
/trieinfo [/ostreamtype /trietype] /trieinfo_os_t load def

%%
%% Note that for the stack functions, the tries are obsolete!
%%
/dup_  /dup load def
/exch_ /exch load def
/pop_  /pop load def
/;_    /; load def

/undef_ /undef load def

/known_ /known load def
/known [/dictionarytype /literaltype] /known_ load def
/known [/integertype /literaltype] {exch GetStatus exch } /known_ load append_p  def

/container trie
  [/arraytype ]  {[]} addtotrie
 [/stringtype ] {()} addtotrie
def

/add trie
  [/integertype /integertype] /add_ii load addtotrie
  [/doubletype  /integertype] /add_di load addtotrie
  [/integertype /doubletype]  /add_id load addtotrie
  [/doubletype  /doubletype]  /add_dd load addtotrie
def

/sub trie
  [/integertype /integertype] /sub_ii load addtotrie
  [/doubletype  /integertype] /sub_di load addtotrie
  [/integertype /doubletype]  /sub_id load addtotrie
  [/doubletype  /doubletype]  /sub_dd load addtotrie
def

/mul trie
  [/integertype /integertype] /mul_ii load addtotrie
  [/doubletype  /integertype] /mul_di load addtotrie
  [/integertype /doubletype]  /mul_id load addtotrie
  [/doubletype  /doubletype]  /mul_dd load addtotrie
def

/div trie
  [/integertype /integertype] /div_ii load addtotrie
  [/doubletype  /integertype] /div_di load addtotrie
  [/integertype /doubletype]  /div_id load addtotrie
  [/doubletype  /doubletype]  /div_dd load addtotrie
def

/** @BeginDocumentation
Name: max - return the greater of two values

Synopsis: val1 val2 max -> result

Description:
This function returns the greater of two values, by removing the other
one from the stack. Hence, the output type is the same as the
respective input type (integer or double).

Alternatives: Functions  max_i_i, max_i_d, max_d_i, max_d_d (all
undocumented), where i is standing for integer and for double as
arguments -> behaviour and synopsis are the same.

Parameters:
val1, val2: numeric values (integer or double)
result    : the greater of the two values (keeping its type, integer
            or double)

Examples:
  1   2   max -> 2
  1   2.0 max -> 2.0
  1.0 2   max -> 2

Author: Ruediger Kupper

FirstVersion: 17.3.2003

SeeAlso: min, gt, lt, geq, leq
*/
/max trie
  [/integertype /integertype] /max_i_i load addtotrie
  [/doubletype  /integertype] /max_d_i load addtotrie
  [/integertype /doubletype]  /max_i_d load addtotrie
  [/doubletype  /doubletype]  /max_d_d load addtotrie
def

/** @BeginDocumentation
Name: min - return the smaller of two values

Synopsis: val1 val2 min -> result

Description:
This function returns the smaller of two values, by removing the other
one from the stack. Hence, the output type is the same as the
respective input type (integer or double).

Alternatives: Functions  min_i_i, min_i_d, min_d_i, min_d_d (all
undocumented), where i is standing for integer and for double as
arguments -> behaviour and synopsis are the same.


Parameters:
val1, val2: numeric values (integer or double)
result    : the smaller of the two values (keeping its type, integer
            or double)

Examples:
  1   2   min -> 1
  1   2.0 min -> 1
  1.0 2   min -> 1.0

Author: Ruediger Kupper

FirstVersion: 17.3.2003

SeeAlso: max, gt, lt, geq, leq
*/

/min trie
  [/integertype /integertype] /min_i_i load addtotrie
  [/doubletype  /integertype] /min_d_i load addtotrie
  [/integertype /doubletype]  /min_i_d load addtotrie
  [/doubletype  /doubletype]  /min_d_d load addtotrie
def

/sin trie
  [/doubletype] /sin_d load addtotrie
  [/integertype] {cvd sin_d} addtotrie
def

/asin trie
  [/doubletype] /asin_d load addtotrie
  [/integertype] {cvd asin_d} addtotrie
def

/cos trie
  [/doubletype] /cos_d load addtotrie
  [/integertype] {cvd cos_d} addtotrie
def

/acos trie
  [/doubletype] /acos_d load addtotrie
  [/integertype] {cvd acos_d} addtotrie
def

/exp trie
  [/doubletype] /exp_d load addtotrie
  [/integertype] {cvd exp_d} bind addtotrie
def

/ln trie
  [/doubletype] /ln_d load addtotrie
  [/integertype] {cvd ln_d} bind addtotrie
def

/log trie
  [/doubletype] /log_d load addtotrie
  [/integertype] {cvd log_d} bind addtotrie
def

/sqr trie
  [/doubletype] /sqr_d load addtotrie
  [/integertype] {cvd sqr_d} bind addtotrie
def

/sqrt trie
  [/doubletype] /sqrt_d load addtotrie
  [/integertype] {cvd sqrt_d} bind addtotrie
def

/pow trie
  [/doubletype /doubletype] /pow_dd load addtotrie
  [/integertype /doubletype] {exch cvd exch pow_dd} bind addtotrie

  % integer exponent is special: exponend may be negative
  [/doubletype /integertype] /pow_di load addtotrie
  [/integertype /integertype] {exch cvd exch pow_di} bind addtotrie
def

/modf trie
  [/doubletype ] /modf_d load addtotrie
def

/frexp trie
  [/doubletype ] /frexp_d load addtotrie
def

/ldexp trie
  [/doubletype /integertype] /ldexp_di load addtotrie
def

/dexp trie
  [/integertype] /dexp_i load addtotrie
def


/eq_ /eq load def
/eq trie
  [/anytype /anytype] /eq_ load addtotrie
def

/neq_ /neq load def
/neq trie
  [/anytype /anytype] /neq_ load addtotrie
def

/not trie
  [/booltype   ] /not_b load addtotrie
  [/integertype] /not_i load addtotrie
def

/xor_ /xor load def
/xor trie
  [/booltype /booltype] /xor_ load addtotrie
def

/and_bb /and load def
/and trie
  [/booltype  /booltype ]     /and_bb load addtotrie
  [/integertype /integertype] /and_ii load addtotrie
def_

/or_bb /or load def
/or trie
  [/booltype  /booltype ]     /or_bb load addtotrie
  [/integertype /integertype] /or_ii load addtotrie
def_

/gt trie
  [/integertype /integertype] /gt_ii load addtotrie
  [/doubletype  /integertype] /gt_di load addtotrie
  [/integertype /doubletype]  /gt_id load addtotrie
  [/doubletype  /doubletype]  /gt_dd load addtotrie
  [/stringtype  /stringtype]  /gt_ss load addtotrie
def

/lt trie
  [/integertype /integertype] /lt_ii load addtotrie
  [/doubletype  /integertype] /lt_di load addtotrie
  [/integertype /doubletype]  /lt_id load addtotrie
  [/doubletype  /doubletype]  /lt_dd load addtotrie
  [/stringtype  /stringtype]  /lt_ss load addtotrie
def

/leq trie
  [/integertype /integertype] /leq_ii load addtotrie
  [/doubletype  /integertype] /leq_di load addtotrie
  [/integertype /doubletype]  /leq_id load addtotrie
  [/doubletype  /doubletype]  /leq_dd load addtotrie
  [/stringtype  /stringtype]  {2 copy eq 3 1 roll lt or} addtotrie
def

/geq trie
  [/integertype /integertype] /geq_ii load addtotrie
  [/doubletype  /integertype] /geq_di load addtotrie
  [/integertype /doubletype]  /geq_id load addtotrie
  [/doubletype  /doubletype]  /geq_dd load addtotrie
  [/stringtype  /stringtype]  {2 copy eq 3 1 roll gt or} addtotrie
def

/forall_di
{
  %stack: <<dict>> {proc}
  {
    %stack: {proc} [/key_i value_i]
    arrayload pop
  } exch join
  %stack: <<dict>> {arrayload pop proc}

  exch
  %stack: {arrayload pop proc} <<dict>>
  cva
  2 Partition

  %stack: {arrayload pop proc} [[/key_1 value_1] [/key_2 value_2] ...]
  exch forall

} bind def
/forall trie
  [/arraytype      /proceduretype] /forall_a    load addtotrie
  [/stringtype     /proceduretype] /forall_s    load addtotrie
  [/dictionarytype /proceduretype] /forall_di   load addtotrie
def

/forallindexed trie
  [/arraytype  /proceduretype] /forallindexed_a load addtotrie
  [/stringtype /proceduretype] /forallindexed_s load addtotrie
def

/getinterval trie
  [/arraytype      /integertype /integertype] /getinterval_a load addtotrie
  [/stringtype     /integertype /integertype] /getinterval_s load addtotrie
def

/join trie
  [/arraytype      /arraytype]     /join_a load addtotrie
  [/stringtype     /stringtype]    /join_s load addtotrie
  [/proceduretype  /proceduretype] /join_p load addtotrie
def

/insert trie
  [/arraytype      /integertype /arraytype]     /insert_a load addtotrie
  [/stringtype     /integertype /stringtype]    /insert_s load addtotrie
%  [/proceduretype  /proceduretype] /join_p load addtotrie
def

/replace trie
  [/arraytype  /integertype /integertype /arraytype]  /replace_a load addtotrie
  [/stringtype /integertype /integertype /stringtype] /replace_s load addtotrie
def

/erase trie
  [/arraytype  ]   {size 0 neq {size 0 exch erase_a} if}  bind addtotrie
  [/proceduretype]   {size 0 neq {size 0 exch erase_p} if}  bind addtotrie
  [/stringtype ]   {size 0 neq {size 0 exch erase_s} if}  bind addtotrie
  [/arraytype  /integertype /integertype ]  /erase_a load addtotrie
  [/proceduretype  /integertype /integertype ]  /erase_p load addtotrie
  [/stringtype /integertype /integertype ]  /erase_s load addtotrie
def

/insertelement trie
  [/arraytype      /integertype /anytype]     /insertelement_a load addtotrie
  [/stringtype     /integertype /integertype] /insertelement_s load addtotrie
def

/prepend trie
  [/arraytype      /anytype]       /prepend_a load addtotrie
  [/arraytype      /integertype]   /prepend_a load addtotrie
  [/proceduretype  /anytype]       /prepend_p load addtotrie
  [/proceduretype  /integertype]   /prepend_p load addtotrie
  [/stringtype     /integertype]   /prepend_s load addtotrie
def

/append trie
  [/arraytype      /anytype]       /append_a load addtotrie
  [/arraytype      /integertype]   /append_a load addtotrie
  [/proceduretype  /anytype]       /append_p load addtotrie
  [/proceduretype  /integertype]   /append_p load addtotrie
  [/stringtype     /integertype]   /append_s load addtotrie
%  [/proceduretype  /proceduretype] /join_p load addtotrie
def

/search trie
  [/arraytype  /arraytype  ]   /search_a load addtotrie
  [/stringtype /stringtype ]   /search_s load addtotrie
def

/capacity trie
 [/arraytype  ]    /capacity_a load addtotrie
 [/stringtype ]    /capacity_s load addtotrie
def

/size trie
 [/arraytype  ]    /size_a load addtotrie
 [/stringtype ]    /size_s load addtotrie
def

/reserve trie
 [/arraytype  /integertype]    /reserve_a load addtotrie
 [/stringtype /integertype]    /reserve_s load addtotrie
def

/:resize trie
 [/arraytype  /integertype]    /:resize_a load addtotrie
 [/stringtype /integertype]    /:resize_s load addtotrie
def

/** @BeginDocumentation
Name: empty - Tests if a string or array is empty.
Synopsis: array empty -> array  bool
          string empty-> string bool
          dict empty -> dict bool
Description: empty returns true if the supplied string/array is
of length 0, or the supplied dict has no entries.
Examples: (hello) empty -> (hello) false
SeeAlso: length, size
*/
/empty trie
 [/arraytype     ]    /empty_a load addtotrie
 [/dictionarytype]    /empty_D load addtotrie
 [/stringtype    ]    /empty_s load addtotrie
def

/shrink trie
 [/arraytype  ]    /shrink_a load addtotrie
def


/** @BeginDocumentation
Name: references - Returns the number of references to a reference counted object.
Synopsis: array references -> array  integer
          dict  references -> dict   integer
Description: references returns the number of references to
a reference counted object including potential self references.
Examples: << /x 0 >> dup references -> dict dict 2
               [ 0 ] dup references -> array array 2
*/
/references trie
 [/arraytype  ]    /references_a load addtotrie
def

/** @BeginDocumentation
Name: cvx - convert array/string to procedure

Synopsis: array/string cvx -> <proceduretype>

Description: Alternatives: Function cvx_a for arrays (undocumented)
-> behaviour and synopsis are the same.

Examples: (hello) cvx -> <proceduretype>

Author: docu by Sirko Straube

SeeAlso: cst, cv1d, cv2d, cva, cvd, cvi, cvlit, cvn, cvs, cvt_a
*/

/cvx trie
[/arraytype]   /cvx_a load addtotrie
[/istreamtype] /cvx_f load addtotrie
[/stringtype]  {cst cvx_a} bind addtotrie
[/anytype]    {}           addtotrie % ignore all other types
def

/** @BeginDocumentation

   Name: cvi - Convert double/string to integer

   Synopsis: double cvi -> integer
             string cvi -> integer

   Description: If cvi is executed with a double, the resulting
   integer is the number without digits after decimal point (the same
   result as floor), if it is executed with a
   string that contains letters 0 is returned. If the string
   contains a double or integer, the corresponding integer is
   returned.

   Alternatives: Function int (undocumented) -> behaviour and
   synopsis are the same.


   Examples:
   3.33 cvi      --> 3
   2    cvi      --> 2
   (23) cvi      --> 23
   (23.2323) cvi --> 23
   (hello) cvi   --> 0

   Diagnostics:
   no errors are issued.

   Author: docu by Sirko Straube

   SeeAlso:  floor, cst, cv1d, cv2d, cva_d, cva_t, cvd, cvi_s, cvlit, cvn, cvs, cvt_a
*/

/cvi trie
 [/integertype] {} addtotrie
 [/doubletype]  /int_d load addtotrie
 [/stringtype] /cvi_s load addtotrie
def

/** @BeginDocumentation

   Name: cvd - Convert integer/string to double

   Synopsis: integer cvd -> double
             string cvd -> double

   Description: If cvd is executed with an integer, the resulting
   double contains zeros after decimal point, if it is executed with a
   string that contains letters 0.0 is returned. If the string
   contains a double or integer, the corresponding double is returned.

   Alternatives: Function double (undocumented) -> behaviour and
   synopsis are the same.

   Examples:
   3 cvd -> 3.0
   (23) cvd -> 23.0
   (23.2323) cvd -> 23.2323
   (hello) cvd -> 0.0

   Diagnostics:
   no errors are issued.

   Author: docu by Sirko Straube

   SeeAlso:  cst, cv1d, cv2d, cva_d, cva_t, cvd_s, cvi, cvlit, cvn, cvs, cvt_a

*/

/cvd trie
 [/integertype] /double_i load addtotrie
 [/doubletype]  {}  addtotrie
 [/stringtype] /cvd_s load addtotrie
def

/exec_ /exec load def
/exec trie
 [/anytype] /exec load addtotrie
def

/trie_ /trie load def
/trie trie
[/literaltype] /trie load addtotrie
def

/addtotrie_ /addtotrie load def
/addtotrie trie
[/trietype /arraytype /anytype] /addtotrie load addtotrie
def


/** @BeginDocumentation
Name: eval - evaluate a string of SLI code
Synopsis: string eval -> obj1 ... objn

Description:
Reads a string and evaluates its content. The resulting objects are
pushed onto the stack.

As in regular batch mode the interpreter reads tokens from a
stream, a string stream in this case, and immediately executes the
incoming language constructs.

A similar function to eval also occurs in Python.

Examples:
 (1 2 add) eval              --> 3
 ([1 2 3] /peter 5 def) eval --> [1 2 3]

Author: Jochen M. Eppler
FirstVersion: June 2013
SeeAlso: cvx, exec, cst, token
*/

/* Implementation notes:
   An alternative implementation is cvx exec. Here cvx calls cst to
   first create an array of token from the string which is then converted
   to a procedure.

   The function ::evalstring uses cvx and executs the procedure in a
   separate stopped context using the standard error handler.
 */
/eval [/stringtype] {
  isstream pop cvx exec
} def


/** @BeginDocumentation
Name: token -  read a token from a stream or string
Synopsis: string token -> post any true
			  false
istream token -> istream any true
                 istream false

Description: reads a token from a string or stream and
pushes true and extracted token plus rest-string/stream
on the stack (if successful).

Examples:
 (1 2 hello) token -> true 1 (2 hello)
 ({1 2 add}) token -> true {1 2 add} ()

Author: docu by Markus Diesmann and Sirko Straube
SeeAlso: token_s, token_is
*/


/token trie
[/stringtype] /token_s load addtotrie
[/istreamtype] /token_is load addtotrie
def


/** @BeginDocumentation
Name: symbol -  read a symbol from a string
Synopsis: string symbol -> post any true
                           false

Description: reads a symbol from a string  and
pushes true, the extracted symbol, and the remainder
of the string. In contrast to the function token,
procedures are not assembled but the individual symbols
are returned. This enables the implementation of
alternative parsers.

Examples:
 (1 2 hello) symbol -> true 1 (2 hello)
 ({1 2 add}) symbol -> true /BeginProcedureSymbol (1 2 add})

FirstVersion: 100107
Author: Diesmann
SeeAlso: token
*/

/symbol trie [/stringtype] /symbol_s load addtotrie def

/** @BeginDocumentation
 Name: good - check good status of a stream
 Synopsis: streamhandle good -> streamhandle true
                             -> streamhandle false
 Description:
    This function provides a direct interface to
    the C++ stream::good() member function.
 Author: Diesmann
 FirstVersion: 26.3.1999
 SeeAlso: igood, ogood
*/
/good trie
 [/istreamtype] { igood } addtotrie
 [/ostreamtype] { ogood } addtotrie
def


/** @BeginDocumentation
 Name: eof - check eof status of a stream
 Synopsis: streamhandle eof -> streamhandle true
                            -> streamhandle false
 Description:
    This function provides a direct interface to
    the C++ stream::eof() member function.
 Author: Diesmann, Hehl
 FirstVersion: 19.4.1999
 SeeAlso: ieof, oeof
*/
/eof trie
 [/istreamtype] { ieof } addtotrie
 [/ostreamtype] { oeof } addtotrie
def


/** @BeginDocumentation
 Name: close - close a stream
 Synopsis: stream close -> -
 Description: This function closes a stream. This may be an istream
              or an ostream.
 Parameters: stream(istreamtype|ostreamtype): The stream to close
 Author: R Kupper
 FirstVersion: May 19 1999
 Remarks: This is just a trie-wrapper for "closeistream" and "closeostream".
 SeeAlso: ifstream, ofstream, ostrstream
*/
/close trie
 [/istreamtype] { closeistream } addtotrie
 [/ostreamtype] { closeostream } addtotrie
def

%% Wrappers for stream functions.

/<--_ /<-- load def
/<-- trie [/ostreamtype /anytype] /<--_ load addtotrie def
/<-_ /<- load def
/<- trie [/ostreamtype /anytype] /<-_ load addtotrie def
/endl_ /endl load def
/endl trie [/ostreamtype] /endl_ load addtotrie def

%% typesave wrappers. Documentation and definition is
%% in sli-init.sli

/=_ /= load def
/= trie
[/anytype] /=_ load addtotrie
def

/==_ /== load def
/== trie
[/anytype] /==_ load addtotrie
def
%%%%%

/** @BeginDocumentation
 Name: abs - absolute value
 Synopsis:  value abs -> value

 Description:
    implemented by C/C++
      long   labs(long) and
      double fabs(double)

      Alternatives: Functions abs_i for integers, abs_d for doubles
      (SeeAlso) -> behaviour and synopsis are the same.

 Examples:
	   -3 abs -> 3
	    3 abs -> 3
	   -3.456 abs -> 3.456

 Remarks: If you are not sure, if the value is of type double or
 integer, use abs.
 If e.g. abs_d gets an integer as argument, NEST will exit throwing an assertion.

 Author: Diesmann, docu by Sirko Straube
 FirstVersion: 27.4.1999
 References: Stroustrup 3rd ed p 660, p 661

 SeeAlso: abs_i, abs_d

*/
/abs trie
 [/integertype] { abs_i } addtotrie
 [/doubletype]  { abs_d } addtotrie
def

/** @BeginDocumentation
 Name: neg - reverse sign of value
 Synopsis:  value neg -> value

 Description:
    implemented by C/C++
     - operator

     Alternatives: Functions neg_i for integers, neg_d for doubles
     (SeeAlso) -> behaviour and synopsis are the same.

 Author: Diesmann
 FirstVersion: 29.7.1999
 Remarks:
  This function is called CHS in HP48S and
  related dialects.
 SeeAlso: neg_i, neg_d
*/
/neg trie
 [/integertype] /neg_i load addtotrie
 [/doubletype]  /neg_d load addtotrie
 [/booltype]    /not_b load addtotrie
def

/** @BeginDocumentation

   Name: cva - Converts argument to an array

   Synopsis: dict         cva -> array
             trie         cva -> array
             array        cva -> array
             intvector    cva -> array
             doublevector cva -> array

   Description: cva converts the argument to an array. The
   array is shaped close to a form usable to recreate the original
   data type. In case the argument is already an array, cva is
   applied recursively.

   Examples:

   << /a 1 /b 2>> cva         --> [/a 1 /b 2]
   /square trie [/doubletype] { dup mul } addtotrie exch pop cva --> [/doubletype [{dup mul}]]
   [ << /a 1 >> << /b 2>>] cva --> [[/a 1] [/b 2]]
   [1 3 -5 2] cv_iv cva        --> [1 3 -5 2]
   [1. 3. -5. 2.] cv_dv cva    --> [1. 3. -5. 2.]

   Author:   Marc-oliver Gewaltig

   SeeAlso:  <<>>, trie, cst, cv1d, cv2d, cva_d, cva_t, cvd, cvi, cvlit, cvn, cvs, cvt_a
*/

/trieheads_iter
{
 dup length 3 eq
 {
  dup First exch
  Last
  trieheads_iter
  exch prepend
 }
 {
  First [] exch append
 }
 ifelse
} def


% trie trieheads
/trieheads
{
 cva trieheads_iter
} def


% MemberQ
% type trie triematches -> true, false
/triematches
{
 trieheads
 exch MemberQ
} def


/cva trie
[/dictionarytype] /cva_d load addtotrie
[/trietype] {cva_t exch pop} addtotrie
[/arraytypetype] {} addtotrie
[/intvectortype] /intvector2array load addtotrie
[/doublevectortype] /doublevector2array load addtotrie
[/arraytype] { {dup type /cva load triematches {cva} if} Map } addtotrie
def


%%%%%%
% commands "keys" and "values" implemented and documented
% in slidict.{cc,h}:
%%%%%%
/keys  [/dictionarytype] /keys load   def
/values[/dictionarytype] /values load def


/getline trie
[/istreamtype] /getline_is load addtotrie
def

/** @BeginDocumentation

   Name: cvlit - Convert name/string/procedure to literal/array

   Synopsis:
   string cvlit -> literal
   name   cvlit -> literal
   proc   cvlit -> array

   Description:
   cvlit converts a given name/string to a
   literal, a given function to an array.

   Examples:
   (joe)   cvlit -> /joe
   { 5 = } cvlit -> [5 =]

   Diagnostics:
   no errors are issued.

   Remarks:
   The name follows the convention of PostScript and stands for
   ConVert to Literal.
   This is a typesafe wrapper to cvlit_n/cvlit_p.

   Author:
   Marc-oliver Gewaltig, docu by HEP

   SeeAlso:  cst, cva, cv1d, cv2d, cvd, cvi, cvn, cvs, cvt_a

*/
/cvlit trie
[/nametype]      /cvlit_n  load addtotrie
[/proceduretype] /cvlit_p  load addtotrie
[/stringtype] {cvn_s cvlit_n} bind addtotrie
[/literaltype] {}  addtotrie
def

/** @BeginDocumentation

   Name: cvn - Convert literal/string to name

   Synopsis:
   string  cvn -> name
   literal cvn -> name

   Description:
   cvn converts a given literal/string to a name.

   Examples:
   (joe) cvn -> joe
   /joe  cvn -> joe

   Diagnostics:
   no errors are issued.

   Remarks:
   The name follows the convention of PostScript and stands for
   ConVert to Name.
   This is a typesafe wrapper to cvn_l/cvn_s.

   Author:
   Marc-oliver Gewaltig, docu by HEP

   SeeAlso: cst, cva, cv1d, cv2d, cvd, cvi, cvlit, cvs, cvt_a

*/
/cvn trie
[/literaltype] /cvn_l load addtotrie
[/stringtype]  /cvn_s load addtotrie
[/nametype]    {}      addtotrie
def

% {} cvlp /{}
/cvlp trie
[/proceduretype] /cvlp_p  load addtotrie
def

/setverbosity trie
[/integertype] /setverbosity_i load addtotrie
def

/repeat_ /repeat load def
/repeat trie
  [/integertype /proceduretype] /repeat_ load addtotrie
def

%% This is a workaround for the currently missing
%% float version of for. It automatically converts
%% all ints to double and checks for argumenttype errors

/for_a
{
  4 1 roll          %% move procedure out of the way
  3
  {
    3 1 roll
    dup_ type /integertype eq
    {
      cvd
    }
    {
      dup type /doubletype neq
      {
	/for /ArgumentType raiseerror
      } if
    } ifelse
  } repeat_
  exch_
  3 arraystore Range  %% construct list of numbers according to the parameters
  exch_
  forall_a
} bind def

/for_i /for load def
/for trie
  [/integertype /integertype /integertype /proceduretype]
  /for_i load addtotrie
  [/anytype /anytype /integertype /proceduretype] %% Use Workaround
  /for_a load addtotrie
  [/anytype /integertype /integertype /proceduretype] %% Use Workaround
  /for_a load addtotrie
  [/anytype /anytype /anytype /proceduretype] %% Use Workaround
  /for_a load addtotrie
def

/begin_ /begin load def

/case_ /case load def
/case trie [/booltype /proceduretype] /case_ load addtotrie def

/ifelse_ /ifelse load def
/if_ /if load def


/** @BeginDocumentation
Name: variant - return specific variant of function
Synopsis: funcname signature variant -> anytype  true
                               false
Description:
 The operator variant checks whether a variant of the function
 matching a particular signature is available. If so, this variant and
 the value true are returned. If not, the return value is false. If
 the literal specifying the function does not refer to a trie the
 function has only a single variant and no information about the
 signature. In this case, the unique variant is returned.  The
 operator variant can be used to optimize SLI code for speed in
 situations where it is guaranteed that a particular variant of a
 function is needed. Here, replacing the overloaded function by the
 specific variant removes the overhead of type checking. A typical
 situation in which the data types of the arguments are known is a
 function call inside a function with a specified signature (see
 example below). Another situation is machine generated SLI code where
 the machine, for example a compiler, is requested to emit optimized
 code restricted to particular data type.

   /incr [/doubletype]
   {
    1.0 add
   }
   << /add /add [/doubletype /doubletype] variant pop >> Inline
   def

Parameters:
   funcname, is a literal specifying the name of the function.
             Usually the literal refers to a trie with several
             variants.
   signature, is an array of literals defining the signature
              of the variant searched for
Examples:

 /add [/doubletype /doubletype] variant pop --> /add_dd load
 /add [/doubletype /stringtype] variant     --> false
 /add [/stringtype /doubletype] variant     --> false
 /ArrayQ [/anytype]             variant pop --> false
 /f {(hello) ==} def
              /f [/integertype] variant pop --> {(hello) ==}

Author: Diesmann
FirstVersion: 090201

SeeAlso: Inline, CompileMath, def, addtotrie, cva
*/

% the recursive part of operator variant
% signature atrie
/:variant
{
 empty
 {
  pop pop false
 }
 {
  size 1 eq
  {
   % the trie has no type to check
   % s a
   exch pop
   First
   true
  }
  {
   % the trie has a type to check
   % s a
   dup First     % s a af
   2 index Last  % s a af sl
   eq
   {
    % the head element of the trie corresponds to
    % the last element in the signature
    % s a
    % remove the last element of the signature
    exch Most exch
    % s a
    % reduce the trie to its second element
    Rest First
    % s a
    :variant
   }
   {
    % the head element of the trie does not correspond to
    % the last element in the signature
    % s a
    size 3 eq
    {
     % the trie has alternatives available
     % s a
     Last  % s ar
     :variant
    }
    {
     % the trie does not have alternatives available
     % s a
     pop pop false
    }
    ifelse  % alternative?
   }
   ifelse  % head element corresponds
  }
  ifelse % trie has type to check
 }
 ifelse % trie empty
}
def


% function signature
/variant [/literaltype /arraytype]
{
 exch load dup type /trietype eq
 {
  cva  exch pop % signature atrie
 :variant
 }
 {
  % no trie, all signatures fit
  exch
  pop
  true
 }
 ifelse
}
def


/** @BeginDocumentation
Name: typebind - optimizes procedure for certain data type
Synopsis: proc dict typebind -> proc

Description:
 The operator is called on a procedure and optimizes the function
 calls in this procedure by removing type checking of the overloaded
 functions according to the information in the dictionary. The dictionary
 specifies the names of the functions for which the type of the arguments
 is knon and the expected combination of argument types. typebind uses this
 information to replace the function calls in the procedure by the appropriate
 variant. This reduces the number of interpreter cycles required to evaluate
 the procedure. However, the bigger effect is the reduction of run time.
 The operator typebind can be used to optimize SLI code for speed in
 situations where it is guaranteed that a particular variant of a
 function is needed. Here, replacing the overloaded function by the
 specific variant removes the overhead of type checking. A typical
 situation in which the data types of the arguments are known is a
 function call inside a function with a specified signature (see
 example below). Another situation is machine generated SLI code where
 the machine, for example a compiler, is requested to emit optimized
 code restricted to particular data type.

   /incr [/doubletype]
   {
    1.0 add
   }
   << /add [/doubletype /doubletype] >> typebind
   def

 The example below achieves a reduction of interpreter cycles by 20%
 but a reduction of rune time by 60%.

Parameters:
   proc, is the procedure to be optimized
   dict, contains as keys the names of the operators that should
         be constrained to a certain combination of argument types.
         The value associated to the key is an array specifying the
         data type of each argument.

Examples:

 The following is the closed form expression of a postsynaptic potential at
 at time t

 (
   weight * E/tau_syn * 1./C_m
     * (   (exp(-t/tau_m)-exp(-t/tau_syn)) / (1./tau_syn - 1./tau_m)^2.
         -        t*exp(-t/tau_syn)        / (1./tau_syn - 1./tau_m)
      )
 )
 CompileMath /v Set

 The expression operates on doubles. Therefore we optimize with

 /v load
  <<
     /add [/doubletype /doubletype]
     /sub [/doubletype /doubletype]
     /mul [/doubletype /doubletype]
     /div [/doubletype /doubletype]
     /pow [/doubletype /doubletype]
     /exp [/doubletype ]
     /neg [/doubletype ]
  >> typebind /v_d Set

 We can further optimize by replacing all symbolic constants by the
 corresponding values

 /v_d load
  <<
    /weight    3.2
    /tau_syn   0.5
    /tau_m    10.0
    /C_m     250.0
    /t         1.345
    /E         E
  >> Inline /v_c Set

 Let us now explore the required number of interpreter cycles and the run time
 of the three versions

 clic v cloc
 clic v_d cloc
 clic v_c cloc
 tic 500000 {v pop}   repeat toc
 tic 500000 {v_d pop} repeat toc
 tic 500000 {v_c pop} repeat toc

 The results are:
                       v    v_d   v_c
   ----------------------------------
   cycles             138   112    97
    reduction factor        1.2   1.4
                            20%   30%
   ----------------------------------
   time               20.8  8.3   6.5
    reduction factor        2.5   3.2
                            60%   69%
   ----------------------------------

Remarks:
 typebind may be implemented by Inline, see the documentation of variant.


Author: Diesmann
FirstVersion: 090210

SeeAlso: variant, Inline, CompileMath, def, clic, tic
*/
/typebind [/proceduretype /dictionarytype]
{
 % p d
 exch
 % d p
 cvlit
 {
  dup type /nametype eq
  {
   % d n
   2 copy
   % d n d n
   cvlit
   known
   % d n b
   {
    % d n
    cvlit
    2 copy
    % d nl d nl
    get
    % d nl k
    variant
    pop      % assuming that the variant exists
    % d v
   }
   if % element is in dictionary
  }
  if    % element is a name
 } Map
 % d a
 cvx
 % d p
 exch pop
 % p
} def




% end of file
