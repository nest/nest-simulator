.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_repeated_stimulation.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_repeated_stimulation.py:


Repeated Stimulation
--------------------

Simple example for how to repeat a stimulation protocol
using the ``origin`` property of devices.

In this example, a :cpp:class:`poisson_generator <nest::poisson_generator>` generates a spike train that is
recorded directly by a :cpp:class:`spike_detector <nest::spike_detector>`, using the following paradigm:

1. A single trial last for 1000 ms.
2. Within each trial, the :cpp:class:`poisson_generator <nest::poisson_generator>` is active from 100 ms to 500 ms.

We achieve this by defining the `start` and `stop` properties of the
generator to 100 ms and 500 ms, respectively, and setting the ``origin`` to the
simulation time at the beginning of each trial. Start and stop are interpreted
relative to the ``origin``.


First, the modules needed for simulation and analyis are imported.


.. code-block:: default



    import nest
    import nest.raster_plot



Second, we set the parameters so the :cpp:class:`poisson_generator <nest::poisson_generator>` generates 1000
spikes per second and is active from 100 to 500 ms


.. code-block:: default



    rate = 1000.0  # generator rate in spikes/s
    start = 100.0  # start of simulation relative to trial start, in ms
    stop = 500.0  # end of simulation relative to trial start, in ms



The simulation is supposed to take 1s (1000 ms) and is repeated 5 times


.. code-block:: default



    trial_duration = 1000.0  # trial duration, in ms
    num_trials = 5      # number of trials to perform



Third, the network is set up.  We reset the kernel and create a
:cpp:class:`poisson_generator <nest::poisson_generator>`, in which the handle is stored in `pg`.

The parameters for rate and start and stop of activity are given as optional
parameters in the form of a dictionary.


.. code-block:: default



    nest.ResetKernel()
    pg = nest.Create('poisson_generator',
                     params={'rate': rate,
                             'start': start,
                             'stop': stop}
                     )



The :cpp:class:`spike_detector <nest::spike_detector>` is created and the handle stored in `sd`.


.. code-block:: default



    sd = nest.Create('spike_detector')



The :py:func:`.Connect` function connects the nodes so spikes from pg are collected by
the :cpp:class:`spike_detector <nest::spike_detector>` `sd`


.. code-block:: default



    nest.Connect(pg, sd)



Before each trial, we set the ``origin`` of the :cpp:class:`poisson_generator <nest::poisson_generator>` to the
current simulation time. This automatically sets the start and stop time of
the :cpp:class:`poisson_generator <nest::poisson_generator>` to the specified times with respect to the origin.
The simulation is then carried out for the specified time in trial_duration.


.. code-block:: default



    for n in range(num_trials):
        nest.SetStatus(pg, {'origin': nest.GetKernelStatus()['time']})
        nest.Simulate(trial_duration)



Now we plot the result, including a histogram using the ``nest.raster_plot``
function. Note: The histogram will show spikes seemingly located before
100 ms into each trial. This is due to sub-optimal automatic placement of
histogram bin borders.


.. code-block:: default


    nest.raster_plot.from_device(sd, hist=True, hist_binwidth=100.,
                                 title='Repeated stimulation by Poisson generator')


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_auto_examples_repeated_stimulation.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: repeated_stimulation.py <repeated_stimulation.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: repeated_stimulation.ipynb <repeated_stimulation.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
