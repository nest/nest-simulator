/*
 *  test_iaf_psc_alpha_multisynapse.sli
 *
 *  This file is part of NEST.
 *
 *  Copyright (C) 2004 The NEST Initiative
 *
 *  NEST is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  NEST is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with NEST.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/* BeginDocumentation
   Name: testsuite::test_iaf_psc_alpha_multisynapse - sli script for the multisynapse model

   Synopsis: (test_iaf_psc_alpha_multisynapse) run

   Description:
   This test creates a multisynapse neuron and first checks if time constants
   can be set correctly. Afterwards, it simulates with four different time constants
   and records the neuron's synaptic current. The expected PSC-maxima are
   calculated and compared with the simulated I_syn.
  

   SeeAlso: testsuite::test_iaf_psc_exp_multisynapse, iaf_psc_alpha_multisynapse

   FirstVersion: March 2009
   Author: Sven Schrader
 */

(unittest) run
/unittest using

/tolerance  1e-2 def %mV
/n_syn 4 def
/taus       [2. 20. 60. 100.] def
/delays     [100. 200. 500. 1200. ] def % ms
/spike_time 100. def
/dt         0.1 def

/iaf_psc_alpha_multisynapse Create /npost Set
npost << /tau_syn taus >> SetStatus

npost GetStatus /tau_syn get
taus eq assert_or_die

/multimeter Create /mm Set
mm <<
    /record_from [/I_syn]
    /withgid false
    /withtime false
    /to_file false
    /to_memory true
    /interval 0.1
    /precision 5 >> SetStatus
    
/spike_generator Create /sg Set
sg << /spike_times [spike_time] >> SetStatus

[ delays [ 4 ] Range ]
{
  /receptor Set
  /delay Set
  [sg] [npost] /one_to_one << /weight 1.0 /delay delay /receptor_type receptor >> Connect
} ScanThread

mm npost 1. 8. /static_synapse Connect

2500 ms Simulate

/d mm GetStatus /events get def
d /I_syn get cva /I_syn Set

% find indices where I_syn should be maximal (weight==1.0)
/expected_maxima [delays taus] { add dt div spike_time dt div add 1 add cvi } MapThread def 

% compare I_syn at above positions with the given unit weight. 
expected_maxima { I_syn exch get 1.0 sub abs tolerance lt } Map
n_syn { true } repeat n_syn arraystore eq assert_or_die

% --------------------------------------------

% The following tests address #800
% - Test that the default recordables are V_m, w and I_syn_1
% - Test that the recordable I_syn's change when changing the number of receptor ports

% test default recordables include I_syn_1
{
  << >> begin
  ResetKernel
  
  /nrn /iaf_psc_alpha_multisynapse Create def
  
  /mm /multimeter << /withtime true /time_in_steps true
                     /interval 1.0 /record_from [ /V_m /I_syn /I_syn_1 ] >> Create def
  
  mm nrn Connect
  
  /len 1 GetStatus /recordables get length def
  len 3 eq
  end
}
assert_or_die

% test resize recordables
{
  << >> begin
  ResetKernel
  
  /tau_syn1  [5.0  1.0  25.0] def
  /tau_syn2  [5.0  1.0] def
  /tau_syn3  [5.0  1.0  25.0 50.] def
  
  /nrn /iaf_psc_alpha_multisynapse << /tau_syn tau_syn1 >> Create def
  /len1 1 GetStatus /recordables get length def
  
  1 << /tau_syn tau_syn2 >> SetStatus
  /len2 1 GetStatus /recordables get length def
  
  1 << /tau_syn tau_syn3 >> SetStatus
  /len3 1 GetStatus /recordables get length def
  
  len1 5 eq len2 4 eq and len3 6 eq and
  end
}
assert_or_die

% test record I_syn_i and check for alpha function synapse
{
  << >> begin
  ResetKernel
  /tau_syn     [40.0 20.0  30.0 25.] def % synaptic time constants
  /weights     [1.0  0.5   2.0  1.0] def % synaptic weights
  /delays      [1.0  3.0   10.0 10.] def % ms - synaptic delays
  /spike_time  10.  def    % time at which the single spike occurs
  /dt          0.1  def    % time step
  /total_t     500. def    % total simulation time
  /tolerance   1e-7 def    % tolerable difference between theoretic and simulated alpha synapse conductances

  /alpha_function
  {
    % Call like t0 W tau t alpha_function
    << /tau 1.0 /W 1.0 /t0 0. >>
    begin
      /t exch def
      /tau exch def
      /W exch def
      /t0 exch def
      
      t
      {
        /tt exch def
        tt t0 geq
        {
          /tdiff_over_tau tt t0 sub tau div def
          tdiff_over_tau neg exp E tdiff_over_tau W mul mul mul
        }
        % else
        {
          0.
        } ifelse
      } Map
    end
  } def

  0 << /resolution dt >> SetStatus

  % Create a spike generator that generates a single spike
  /spike_generator Create /sg Set
  sg << /spike_times [spike_time] >> SetStatus % generates a single peak


  % Create the multisynapse neuron
  /nrn /iaf_psc_alpha_multisynapse 
    <<  /I_e 0. /tau_syn tau_syn  >> Create def

  % Create an array of synaptic indexes to loop through 
  delays length 1 arraystore Range /synapses_idx exch def
  [delays weights synapses_idx] % loop on synaptic receptor ports
  {
    /syn_id exch def
    /W exch def
    /delay exch def
    % Connect spike generator to each port
    [sg] [nrn] /one_to_one <<
      /model /static_synapse
      /delay delay
      /weight W
      /receptor_type syn_id >>
      Connect
  } ScanThread

  % Create the multimeter that will record from the 4 synapse channels
  /mm /multimeter << /withtime true /time_in_steps true
                     /interval dt /record_from
                     [ /I_syn_1 /I_syn_2 /I_syn_3 /I_syn_4 ]
                       >> Create def

  mm nrn Connect

  % Simulate
  total_t Simulate

  % Get the conductances measured during the simulation
  /t       mm /events get /times get cva dt mul def
  /sim_I_syn_1 mm /events get /I_syn_1   get cva def
  /sim_I_syn_2 mm /events get /I_syn_2   get cva def
  /sim_I_syn_3 mm /events get /I_syn_3   get cva def
  /sim_I_syn_4 mm /events get /I_syn_4   get cva def
  /sim_I_syns [sim_I_syn_1 sim_I_syn_2 sim_I_syn_3 sim_I_syn_4] def

  true
  [delays weights tau_syn sim_I_syns]
  {
    /sim_I_syn  exch def
    /tau        exch def
    /W          exch def
    /t0         exch spike_time add def
    /theo_I_syn t0 W tau t alpha_function def
    sim_I_syn theo_I_syn sub { abs } Map Max tolerance leq and
  } ScanThread
  end
}
assert_or_die

endusing
