/*
 *  test_add_freeze_thaw.sli
 *
 *  This file is part of NEST.
 *
 *  Copyright (C) 2004 The NEST Initiative
 *
 *  NEST is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  NEST is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with NEST.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

% SLI2PYCOMPLEXITY: Low

/** @BeginDocumentation
Name: testsuite::test_add_freeze_thaw - test that per-thread nodes vectors are updated 

Synopsis: (test_add_freeze_thaw.sli) run -> dies if assertion fails

Description:
1. Create nodes driven by internal current, simulate, check V_m changes.
2. Add more nodes, reset old nodes, simulate again, check V_m changes for all.
3. Freeze half the nodes, simulate, check their V_m is constant.
4. Thaw nodes, simulate, check V_m changes again.

Author: Plesser
FirstVersion: 2014-11-05
*/

(unittest) run
/unittest using

M_ERROR setverbosity

/num_threads 4 def
/blocksize 11 def   % number of neurons to create / freeze, intentionally not multiple of num_threads 
/simtime 10. def
/Vmref /iaf_psc_alpha GetDefaults /V_m get def

ResetKernel

% run on multiple threads if possible
statusdict/threading :: (no) neq 
{
  << /local_num_threads num_threads >> SetKernelStatus
}
if

/node_pop_a /iaf_psc_alpha blocksize << /I_e -50.0 >> Create def

% first test: one block of neurons
{
  % hyperpolarizing, avoids spikes
  simtime Simulate
  true
  node_pop_a
  { 
    /V_m get Vmref lt and 
  } forall
} assert_or_die

/node_pop_b /iaf_psc_alpha blocksize << /I_e -50.0 >> Create def
/all_nodes node_pop_a node_pop_b join def

% second test: additional block of neurons
{
  % reset existing neurons
  all_nodes { << /V_m Vmref >> SetStatus } forall
  
  simtime Simulate
  true
  all_nodes
  { 
    /V_m get Vmref lt and 
  } forall
} assert_or_die

% third test: freeze some neurons
{
  
  % reset existing neurons
  all_nodes { << /V_m Vmref >> SetStatus } forall

  /frozen_nodes node_pop_a def
  /thawed_nodes node_pop_b def

  frozen_nodes  { << /frozen true >> SetStatus } forall

  simtime Simulate
  true frozen_nodes { /V_m get Vmref eq and } forall
  true thawed_nodes { /V_m get Vmref lt and } forall
  and   
} assert_or_die

% fourth test: thaw them again
{
  all_nodes
    
  % reset existing neurons
  all_nodes { << /V_m Vmref /frozen false >> SetStatus } forall

  simtime Simulate
  true all_nodes { /V_m get Vmref lt and } forall
} assert_or_die


endusing
