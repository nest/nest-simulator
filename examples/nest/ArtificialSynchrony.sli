/*
 *  ArtificialSynchrony.sli
 *
 *  This file is part of NEST.
 *
 *  Copyright (C) 2004 The NEST Initiative
 *
 *  NEST is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  NEST is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with NEST.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

% autorun=true

%%%%%%%%%%%%%%%% Write welcome message %%%%%%%%%%%%%%%%%%%%%%
(\n\n) =
1 1 80 { (#) =only } for ( ) =
(Artificial synchrony can be introduced by discrete-time simulation
of neuronal networks, because they typically constrain spike times to a
grid determined by the computational step size. Hansel et al. (1998) used
a small all to all connected network of spiking neurons to demonstrated
that this artificial synchrony can be reduced by a finer resolution or by
interpolating for the correct spike times. In a further step Morrison et
al. (2007) showed that by interpolating the exact spike times and
distributing them, not only the artificial synchrony is avoided
but even machine precision can be obtained for small time steps.

Here, we simulate the 'Hansel' network of 128 all to all connected
excitatory I&F neurons with alpha shaped PSC in the
1. precise implementation by Morrison et al. (2007).
2. grid constrained implementation

The synchrony of the network can be calculated from the membrane
potentials of each neuron following Hansel et al. (1998).  Thus, by
varying the coupling weights and estimating the corresponding
synchrony of the network the results of Hansel et al. (1998), Morrison
et al. (2007) and Diesmann et al. (2008) can be reproduced.

An additional Perl script performs the task to calculate the synchrony
and generate the final plot.

References:
D. Hansel, G. Mato, C. Meunier, and L. Neltner. On numerical
simulations of integrate-and-fire neural networks. Neural Computation,
10(2):467-483, Feb., 15 1998.

A. Morrison, S. Straube, H. E. Plesser, and M. Diesmann. Exact
subthreshold integration with continuous spike times in discrete time
neural network simulations. Neural Computation, 19(1):47-79, 2007.

Diesmann M, Hanuschkin A, Helias M, Kunkel S and Morrison A
(2008). The performance of solvers for integrate-and-fire models with
exact spike timing.  Frontiers in Neuroinformatics. Conference
Abstract: Neuroinformatics 2008.

AH 09) =
1 1 80 { (#) =only } for (\n\n) =


%%%%%%%%%%%%%%%%% Simulation parameter  %%%%%%%%%%%%%%%%%%%%%%%%%
(Set Simulation Parameters ) =only
/nr 128 def                     % number of neurons in the network

/h 2. -5 pow def                % simulation resolution h=2^-5
/tics_per_ms 2 5 pow def        % low-level time resolution in tics

/C_m 250.0 def                  % membrane capacitance
/E_L 0.0 def                    % leaky potential
/I_e 575.0 def                  % suprathreshold current
/tau_m 10.0 def                 % membrane time constant
/V_reset 0.0 def                % reset potential
/V_th  20.0 def                 % threshold potential
/t_refra 0.25 def               % refractory time
/tau_syn 1.648 def              % syn. time constant 3/2ln3

/gamma 0.5 def                  % parameter determining the degree of synchrony at the beginning

/tofile true def                % write potentials of the neurons to file

/delay 0.25 def                 % synaptic delay

%% set random number generator seed and random parameter
/rng_seed 2000 def
/V_m_parameter << /uniform << /min V_reset /max V_th >> >> CreateParameter def
(-DONE-) =


%%%%%%%%%%%%%%%%% Setup report  %%%%%%%%%%%%%%%%%%%%%%%%%
(gamma []: \t) =only gamma =    % The initial synchronization is determined by gamma.
(delay [ms]:\t) =only delay =
(tau_r [ms]:\t) =only t_refra =

%% Calculate spike period T (needed for setup of initial membrane potential)
 tau_m  C_m   div  /R Set
 R I_e mul  E_L add  V_reset sub  R I_e mul  E_L add  V_th sub  div  ln  tau_m mul  dup /T Set
 (ISI [ms]:\t) =only  T =only
 1.0 exch div  % now we have the fire rate
 (, i.e. firingrate [Hz]: ) =only 1000.0 mul =


%%%%%%%%%%%%%%%%%  Start Simulation Section   %%%%%%%%%%%%%%%%%%%%%%%%%
1 1 2 {
/sim Set   % sim = 1 Precise / sim = 2 Grid

sim 1 eq {
 /params <<
        /C_m C_m
        /E_L E_L
        /I_e I_e
        /tau_m tau_m
        /tau_syn_ex tau_syn
        /tau_syn_in tau_syn
        /V_m  E_L
        /V_reset V_reset
        /V_th  V_th
        /t_ref t_refra
     >> def
 }
 {
 /params <<
        /C_m C_m
        /E_L E_L
        /I_e I_e
        /tau_m tau_m
        /tau_syn_ex tau_syn
        /V_m  E_L
        /V_reset V_reset
        /V_th  V_th
        /t_ref t_refra
     >> def
 } ifelse


() =
1 1 40 { (#) =only } for
sim 1 eq {(\nRun the precise simulations first: )= }
         {(\nRun the grid constrained simulations now: )= } ifelse

userdict begin
 0.0 0.2 5.0 {
  cvd /strength Set

  (weight [pA]:\t) =only strength =

  %set resolution and limits on delays
  % limits must be set BEFORE connecting any elements
  <<
      /resolution h                  % time steps in ms
      /tics_per_ms tics_per_ms       % low-level time resolution
      /off_grid_spiking true         % precise neuron model
      /rng_seed rng_seed             % set rng seed
      /overwrite_files true          % overwrite previous output
  >> SetKernelStatus

  sim 1 eq { /neurons /iaf_psc_alpha_ps nr Create def }
           { /neurons /iaf_psc_alpha nr Create def } ifelse

  % connect neurons all to all
  /autapses_bool true def         % Change to false to avoid self connections
  neurons neurons << /rule /all_to_all /allow_autapses autapses_bool >> << /weight strength /delay delay >> Connect

  /*                                    % uncomment to verify connections
  %% Readout if everything works
  neurons {
    /ii Set
    (\n\nneuron ) = ii = (connects to) =
    << /source ii /synapse_model /static_synapse >> GetConnections
    { GetStatus /target get } Map ==
  } forall
  */

  %% Set the neuron parameters according to definition
  (Set neuron parameters ) =only
  neurons {
    params SetStatus
  } forall
  (-DONE-) =

  %% Set initial potentials
  (Set initial potentials [mV] (Morrison et al. 2007) ) =only
  neurons {
   /ii Set
   R I_e mul                            % like Morrison et al. 2007
   1 -1.0 gamma mul ii 1 sub nr cvd div T tau_m div mul mul exp sub mul
   %dup =                               % uncomment to print out value of initial potentials

   /V_0 Set

   %%% Alternatively take just random initial states
   % /V_0 V_m_parameter dup def

   ii << /V_m  V_0 >> SetStatus         % set initial potential to each neuron
  } forall
  (-DONE-) =

  /record_to tofile { /ascii } { [] } ifelse def

  (Create voltmeter ) =only
  %% generate spike recorders and voltmeter for each neuron
  % spike recorders will generate enormous amounts of data!
  % /spike_recorder << /record_to record_to >> Create /detec Set
  /voltmeter << /record_to record_to /interval 1.0 >> Create /volt Set

  sim 1 eq {volt  <<  /label (voltmeter-Precise-) strength cvs join >> SetStatus}
           {volt  <<  /label (voltmeter-Grid-) strength cvs join >> SetStatus} ifelse
  (-DONE-) =

  % neurons detec 1.0 h Connect         % connect spike_recorder
  volt neurons 1.0 h Connect            % connect voltmeter

  10000 Simulate                        % simulate for 10s

  ResetKernel
 } for                                  % for each coupling strength
end
} for                                   % for each neuron model
