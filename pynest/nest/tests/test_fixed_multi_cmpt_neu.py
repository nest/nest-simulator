# -*- coding: utf-8 -*-
#
# test_fixed_multi_cmpt_neu.py
#
# This file is part of NEST.
#
# Copyright (C) 2004 The NEST Initiative
#
# NEST is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# NEST is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NEST.  If not, see <http://www.gnu.org/licenses/>.

# This script tests the iaf_cond_alpha_mc_fixedca_neuron in NEST,
# while comparing it with an implementation of the neuron model in
# python using ode solver. The inputs to both neuron models are spikes
# to an excitatory synapse at the distal compartment to trigger a calcium
# spike. The membrane potential at the distal compartment of the models
# are then compared.

import numpy as np
import pylab as pl
import matplotlib.cm as cm
import math
import nest
from scipy import *
from scipy.integrate import ode
import unittest

HAVE_GSL = nest.sli_func('statusdict/have_gsl ::')


class mc_neuron_ode:

    def fun_u(self, t, y):
        f = [
            1. / self.C_m[0, 0] * (-self.G_l[0, 0] * (y[0] -
                                   self.E_l[0, 0]) - y[12] * (y[0] -
                                   self.E_ex[0, 0]) - y[14] * (y[0] -
                                   self.E_in[0, 0]) - self.G_conn[0] *
                                   (y[0] - self.E_l[0, 0] - (y[1] -
                                    self.E_l[1, 0])) + self.I_curr[0,
                                                                   0]),
            1. / self.C_m[1, 0] * (-self.G_l[1, 0] * (y[1] -
                                   self.E_l[1, 0]) - y[8] * (y[1] -
                                   self.E_ex[1, 0]) - y[10] * (y[1] -
                                   self.E_in[1, 0]) - self.G_conn[0] *
                                   (y[1] - self.E_l[1, 0] - (y[0] -
                                    self.E_l[0, 0])) - self.G_conn[1] *
                                   (y[1] - self.E_l[1, 0] - (y[2] -
                                    self.E_l[2, 0])) + self.I_curr[1,
                                                                   0]),
            1. / self.C_m[2, 0] * (-self.G_l[2, 0] * (y[2] -
                                   self.E_l[2, 0]) - y[4] * (y[2] -
                                   self.E_ex[2, 0]) - y[6] * (y[2] -
                                   self.E_in[2, 0]) - self.G_conn[1] *
                                   (y[2] - self.E_l[2, 0] - (y[1] -
                                    self.E_l[1, 0])) + self.I_curr[2,
                                                                   0] +
                                   self.catmp),
            -y[3] / self.Tau_synE[2, 0],
            y[3] - y[4] / self.Tau_synE[2, 0],
            -y[5] / self.Tau_synI[2, 0],
            y[5] - y[6] / self.Tau_synI[2, 0],
            -y[7] / self.Tau_synE[1, 0],
            y[7] - y[8] / self.Tau_synE[1, 0],
            -y[9] / self.Tau_synI[1, 0],
            y[9] - y[10] / self.Tau_synI[1, 0],
            -y[11] / self.Tau_synE[0, 0],
            y[11] - y[12] / self.Tau_synE[0, 0],
            -y[13] / self.Tau_synI[0, 0],
            y[13] - y[14] / self.Tau_synI[0, 0],
            ]

        return f

    def __init__(self, active, resolution):
        self.num_cmpt = 3
        self.cmpt_cnt = 0

        self.active_flag = active
        self.resolution = resolution
        self.V_th = -45.
        self.dist_V_th = -20.
        self.V_T = self.V_th
        self.dist_VT = self.dist_V_th
        self.V_reset = -60.  # mV
        self.T_ref = 2.0  # ms
        self.G_conn = [25., 25.]  # nS

        self.tau_VT = 7.
        self.VT_jump = 25.
        self.reset_time = int(self.T_ref / self.resolution)
        self.tau_distVT = 20.
        self.dist_VT_jump = 20.
        self.counter = 0
        self.ref = 0
        self.E_l = np.array([[-70.], [-65.], [-60.]])  # mV
        self.Conn_mat = np.array([[self.G_conn[0], -self.G_conn[0],
                                 0.], [-self.G_conn[0], self.G_conn[0] +
                                 self.G_conn[1] + self.E_l[1],
                                 -self.G_conn[1]], [0.,
                                 -self.G_conn[1], self.G_conn[1] +
                                 self.E_l[2]]])
        self.G_l = np.array([[5.], [5.], [5.]])  # nS
        self.C_m = np.array([[43.], [18.], [13.]])  # pF

        self.E_ex = np.array([[0.], [0.], [0.]])  # mV
        self.E_in = np.array([[-85.0], [-85.0], [-85.0]])  # mV

        self.Tau_synE = np.array([[1.], [1.], [1.]])  # ms
        self.Tau_synI = np.array([[2.0], [2.0], [2.0]])  # ms
        self.u = np.array([
            -70.,
            -65.,
            -60.,
            0.,
            0.,
            0.,
            0.,
            0.,
            0.,
            0.,
            0.,
            0.,
            0.,
            0.,
            0.,
            ])
        self.G_exc = np.array([[0.], [0.], [0.]])
        self.G_inh = np.array([[0.], [0.], [0.]])
        self.G_ca = np.array([[0.], [0.], [0.]])
        self.G_exc1 = np.array([[0.], [0.], [0.]])
        self.G_inh1 = np.array([[0.], [0.], [0.]])
        self.G_ca1 = np.array([[0.], [0.], [0.]])
        self.I_conn = 0.
        self.I_curr = np.array([[0.], [0.], [0.]])

        self.y_exc = np.array([[[0.], [0.]], [[0.], [0.]], [[0.],
                              [0.]]])
        self.y_inh = np.array([[[0.], [0.]], [[0.], [0.]], [[0.],
                              [0.]]])
        self.y_ca = np.array([[[0.], [0.]], [[0.], [0.]], [[0.], [0.]]])

        # distal_spike parameters

        self.thca = -24.5
        self.ca = np.array([
            0.101505459544,
            0.294432926197,
            0.827341319615,
            2.23613332778,
            5.7513806152,
            13.8254306961,
            30.2196601894,
            58.2886444295,
            97.7872982964,
            144.371168629,
            192.824575186,
            239.570320787,
            282.844159137,
            322.013557065,
            357.015741847,
            388.04918845,
            415.425498549,
            439.500548182,
            460.641738122,
            479.211474696,
            495.558181061,
            510.011061996,
            522.876949273,
            534.438448268,
            544.952989434,
            554.652556157,
            563.743937612,
            572.409393555,
            580.807639574,
            589.075075601,
            597.327191366,
            605.660091706,
            614.152092872,
            622.865348531,
            631.847471041,
            641.133119907,
            650.745535012,
            660.697997329,
            670.995204329,
            681.63455122,
            692.607312538,
            703.899721445,
            715.493946501,
            727.368967545,
            739.501353916,
            751.865949385,
            764.436469041,
            777.186014007,
            790.087510186,
            803.114077472,
            816.239335851,
            829.437654729,
            842.684351629,
            855.955846112,
            869.229774451,
            882.485070221,
            895.702015568,
            908.862267523,
            921.948863326,
            934.946208322,
            947.840049621,
            960.617438329,
            973.266682847,
            985.777295381,
            998.139933537,
            1010.3463386,
            1022.38927185,
            1034.26245001,
            1045.96048091,
            1057.47879985,
            1068.81360763,
            1079.96181048,
            1090.92096225,
            1101.6892094,
            1112.26523857,
            1122.64822722,
            1132.83779717,
            1142.83397113,
            1152.63713214,
            1162.24798593,
            1171.66752609,
            1180.89700185,
            1189.93788852,
            1198.79186028,
            1207.46076537,
            1215.94660336,
            1224.25150448,
            1232.37771088,
            1240.3275596,
            1248.10346716,
            1255.70791574,
            1263.14344059,
            1270.41261892,
            1277.51805973,
            1284.4623949,
            1291.24827115,
            1297.87834288,
            1304.35526586,
            1310.68169166,
            1316.86026264,
            1322.89360768,
            1328.78433836,
            1334.53504561,
            1340.14829688,
            1345.6266336,
            1350.9725691,
            1356.18858677,
            1361.27713851,
            1366.24064347,
            1371.08148695,
            1375.80201959,
            1380.40455666,
            1384.89137754,
            1389.26472534,
            1393.52680663,
            1397.67979128,
            1401.72581245,
            1405.66696656,
            1409.50531342,
            1413.2428764,
            1416.88164266,
            1420.42356339,
            1423.87055416,
            1427.22449526,
            1430.48723206,
            1433.66057545,
            1436.74630225,
            1439.74615567,
            1442.66184578,
            1445.49504996,
            1448.24741341,
            1450.92054964,
            1453.51604096,
            1456.035439,
            1458.48026519,
            1460.85201132,
            1463.15213997,
            1465.38208508,
            1467.54325241,
            1469.63702008,
            1471.66473903,
            1473.62773354,
            1475.5273017,
            1477.36471589,
            1479.14122328,
            1480.85804627,
            1482.51638298,
            1484.11740771,
            1485.66227136,
            1487.1521019,
            1488.58800483,
            1489.97106356,
            1491.30233988,
            1492.58287435,
            1493.81368673,
            1494.99577637,
            1496.13012261,
            1497.2176852,
            1498.25940462,
            1499.25620252,
            1500.20898206,
            1501.11862827,
            1501.98600843,
            1502.81197239,
            1503.59735292,
            1504.34296609,
            1505.04961152,
            1505.7180728,
            1506.34911773,
            1506.94349866,
            1507.50195282,
            1508.02520257,
            1508.51395576,
            1508.96890596,
            1509.39073278,
            1509.78010211,
            1510.13766647,
            1510.46406517,
            1510.75992466,
            1511.02585877,
            1511.2624689,
            1511.47034436,
            1511.65006256,
            1511.80218923,
            1511.92727871,
            1512.02587413,
            1512.00582174,
            1511.79792323,
            1511.43327988,
            1510.9384065,
            1510.33586422,
            1509.64480888,
            1508.88146608,
            1508.05954259,
            1507.19058236,
            1506.28427452,
            1505.34871965,
            1504.39065985,
            1503.41567737,
            1502.42836609,
            1501.43247926,
            1500.43105682,
            1499.42653497,
            1498.42084041,
            1497.4154712,
            1496.4115662,
            1495.40996451,
            1494.4112563,
            1493.41582628,
            1492.42389065,
            1491.43552866,
            1490.45070929,
            1489.46931384,
            1488.49115511,
            1487.51599338,
            1486.54354993,
            1485.57351824,
            1484.60557334,
            1483.6393795,
            1482.67459654,
            1481.71088496,
            1480.74791005,
            1479.78534521,
            1478.82287444,
            1477.86019432,
            1476.89701546,
            1475.93306351,
            1474.96807983,
            1474.00182185,
            1473.03406322,
            1472.06459375,
            1471.0932192,
            1470.11976093,
            1469.14405545,
            1468.16595396,
            1467.18532172,
            1466.20203748,
            1465.21599285,
            1464.22709163,
            1463.23524918,
            1462.24039175,
            1461.24245583,
            1460.24138756,
            1459.23714204,
            1458.22968281,
            1457.21898123,
            1456.20501593,
            1455.18777228,
            1454.16724189,
            1453.14342214,
            1452.11631569,
            1451.08593007,
            1450.05227728,
            1449.0153734,
            1447.97523818,
            1446.93189479,
            1445.88536941,
            1444.83569101,
            1443.78289101,
            1442.72700304,
            1441.66806271,
            1440.60610737,
            1439.54117589,
            1438.47330849,
            1437.40254655,
            1436.32893241,
            1435.25250927,
            1434.17332101,
            1433.09141205,
            1432.00682726,
            1430.91961182,
            1429.82981114,
            1428.73747074,
            1427.64263618,
            1426.54535298,
            1425.44566653,
            1424.34362205,
            1423.23926452,
            1422.1326386,
            1421.02378864,
            1419.91275857,
            1418.7995919,
            1417.68433167,
            1416.56702043,
            1415.44770018,
            1414.32641239,
            1413.20319794,
            1412.07809713,
            1410.95114964,
            1409.82239451,
            1408.69187016,
            1407.55961437,
            1406.42566423,
            1405.29005618,
            1404.15282602,
            1403.01400882,
            1401.87363903,
            1400.73175038,
            1399.58837595,
            1398.44354813,
            1397.29729863,
            1396.14965851,
            1395.00065812,
            1393.85032719,
            1392.69869474,
            1391.54578919,
            1390.39163824,
            1389.23626901,
            1388.07970793,
            1386.92198082,
            1385.76311287,
            1384.60312865,
            1383.4420521,
            1382.27990658,
            1381.11671484,
            1379.95249902,
            1378.78728071,
            1377.6210809,
            1376.45392002,
            1375.28581794,
            1374.11679397,
            1372.94686688,
            1371.7760549,
            1370.60437573,
            1369.43184656,
            1368.25848403,
            1367.0843043,
            1365.90932303,
            1364.73355538,
            1363.55701601,
            1362.37971912,
            1361.20167844,
            1360.0229072,
            1358.84341821,
            1357.6632238,
            1356.48233588,
            1355.30076588,
            1354.11852483,
            1352.93562331,
            1351.75207149,
            1350.56787911,
            1349.38305551,
            1348.19760961,
            1347.01154994,
            1345.82488461,
            1344.63762136,
            1343.44976754,
            1342.2613301,
            1341.07231563,
            1339.88273031,
            1338.69257999,
            1337.50187012,
            1336.3106058,
            1335.11879176,
            1333.92643238,
            1332.73353168,
            1331.54009331,
            1330.3461206,
            1329.15161651,
            1327.95658366,
            1326.76102432,
            1325.56494043,
            1324.36833358,
            1323.17120502,
            1321.97355567,
            1320.7753861,
            1319.57669656,
            1318.37748695,
            1317.17775685,
            1315.97750549,
            1314.77673178,
            1313.57543429,
            1312.37361124,
            1311.17126056,
            1309.96837979,
            1308.76496617,
            1307.56101659,
            1306.3565276,
            1305.15149543,
            1303.94591594,
            1302.73978466,
            1301.53309679,
            1300.32584715,
            1299.11803024,
            1297.9096402,
            1296.7006708,
            1295.49111548,
            1294.28096729,
            1293.07021893,
            1291.85886274,
            1290.64689066,
            1289.43429429,
            1288.22106481,
            1287.00719305,
            1285.79266943,
            1284.57748397,
            1283.3616263,
            1282.14508563,
            1280.92785078,
            1279.70991013,
            1278.49125165,
            1277.27186284,
            1276.05173082,
            1274.83084221,
            1273.6091832,
            1272.38673951,
            1271.1634964,
            1269.93943863,
            1268.71455049,
            1267.48881576,
            1266.26221771,
            1265.0347391,
            1263.80636215,
            1262.57706856,
            1261.34683946,
            1260.11565542,
            1258.88349643,
            1257.65034192,
            1256.41617068,
            1255.18096091,
            1253.94469018,
            1252.70733541,
            1251.46887287,
            1250.22927815,
            1248.98852616,
            1247.74659109,
            1246.50344642,
            1245.25906489,
            1244.01341846,
            1242.76647834,
            1241.51821493,
            1240.2685978,
            1239.01759571,
            1237.76517652,
            1236.51130725,
            1235.25595397,
            1233.99908185,
            1232.7406551,
            1231.48063692,
            1230.21898954,
            1228.95567413,
            1227.69065081,
            1226.42387857,
            1225.15531532,
            1223.88491779,
            1222.61264152,
            1221.33844081,
            1220.06226873,
            1218.78407704,
            1217.50381615,
            1216.22143511,
            1214.93688157,
            1213.65010168,
            1212.36104012,
            1211.06964001,
            1209.77584289,
            1208.47958864,
            1207.18081544,
            1205.87945974,
            1204.57545618,
            1203.26873753,
            1201.95923466,
            1200.64687645,
            1199.33158973,
            1198.01329922,
            1196.69192746,
            1195.36739477,
            1194.03961909,
            1192.70851599,
            1191.37399855,
            1190.03597728,
            1188.69436004,
            1187.34905193,
            1185.99995523,
            1184.64696925,
            1183.28999028,
            1181.92891145,
            1180.56362264,
            1179.19401034,
            1177.81995754,
            1176.4413436,
            1175.05804414,
            1173.66993087,
            1172.27687146,
            1170.87872939,
            1169.47536379,
            1168.0742591,
            1166.6666682,
            1165.25253464,
            1163.83178706,
            1162.40433998,
            1160.97009446,
            1159.52893873,
            1158.08074864,
            1156.62538808,
            1155.16270935,
            1153.69255338,
            1152.21474993,
            1150.72911777,
            1149.23546471,
            1147.7335877,
            1146.2232727,
            1144.70429474,
            1143.1764177,
            1141.63939421,
            1140.09296547,
            1138.53686094,
            1136.97079813,
            1135.39448227,
            1133.80760593,
            1132.20984865,
            1130.60087649,
            1128.98034158,
            1127.34788161,
            1125.70311924,
            1124.04566156,
            1122.37509943,
            1120.6910068,
            1118.99293998,
            1117.28043689,
            1115.55301623,
            1113.8101766,
            1112.05139561,
            1110.27612885,
            1108.48380889,
            1106.67384416,
            1104.8456178,
            1102.99848642,
            1101.1317788,
            1099.24479453,
            1097.33680253,
            1095.40703953,
            1093.45470844,
            1091.47897664,
            1089.47897419,
            1087.4537919,
            1085.40247937,
            1083.3240428,
            1081.21744286,
            1079.08159227,
            1076.9153534,
            1074.71753565,
            1072.48689279,
            1070.2221201,
            1067.92185142,
            1065.58465606,
            1063.20903559,
            1060.79342049,
            1058.33616673,
            1055.83555214,
            1053.28977277,
            1050.69693911,
            1048.05507227,
            1045.36210009,
            1042.6158532,
            1039.81406118,
            1036.95434871,
            1034.03423183,
            1031.05111446,
            1028.00228505,
            1024.88491372,
            1021.69604973,
            1018.43261963,
            1015.09142614,
            1011.66914785,
            1008.16234018,
            1004.56743758,
            1000.88075738,
            997.09850556,
            993.216784707,
            989.231604632,
            985.138895952,
            980.934527119,
            976.614325326,
            972.174101767,
            967.609681729,
            962.916939954,
            958.0918417,
            953.130489838,
            948.02917823,
            942.784451451,
            937.393170752,
            931.852585864,
            926.160411929,
            920.31491046,
            914.314972793,
            908.160203984,
            901.851004642,
            895.388647639,
            888.775346238,
            882.014309821,
            875.109783201,
            868.067065595,
            860.892505612,
            853.593469278,
            846.178279118,
            838.656123616,
            831.036937984,
            823.331258907,
            815.550057768,
            807.70455847,
            799.806047337,
            791.865683389,
            783.894317517,
            775.902328618,
            767.89948358,
            759.89482634,
            751.89659914,
            743.912196843,
            735.948153032,
            728.010154732,
            720.103081199,
            712.231061359,
            704.397544175,
            696.605376435,
            688.856883036,
            681.153945681,
            673.4980769,
            665.890487262,
            658.332144558,
            650.823824487,
            643.366152963,
            635.959640578,
            628.604710038,
            621.3017175,
            614.050968791,
            606.852731449,
            599.707243445,
            592.614719329,
            585.575354439,
            578.589327695,
            571.656803376,
            564.777932216,
            557.952852049,
            551.181688178,
            544.464553593,
            537.801549118,
            531.192763548,
            524.638273793,
            518.138145053,
            511.692431037,
            505.3011742,
            498.964406018,
            492.68214728,
            486.454408386,
            480.281189658,
            474.162481636,
            468.09826538,
            462.088512743,
            456.133186635,
            450.23224127,
            444.38562239,
            438.593267464,
            432.855105876,
            427.171059089,
            421.541040788,
            415.964957016,
            410.442706282,
            404.974179672,
            399.559260935,
            394.197826568,
            388.889745893,
            383.634881126,
            378.433087445,
            373.284213052,
            368.188099236,
            363.144580436,
            358.153484304,
            353.214631768,
            348.327837104,
            343.492908001,
            338.709645638,
            333.977844759,
            329.297293759,
            324.667774763,
            320.089063726,
            315.560930518,
            311.08313903,
            306.655447277,
            302.277607504,
            297.949366301,
            293.670464715,
            289.440638379,
            285.259617627,
            281.127127625,
            277.042888506,
            273.006615494,
            269.01801905,
            265.076805006,
            261.182674705,
            257.335325146,
            253.53444913,
            249.779735401,
            246.070868799,
            242.407530404,
            238.789397687,
            235.216144658,
            231.687442016,
            228.202957302,
            224.762355043,
            221.365296906,
            218.011441844,
            214.700446247,
            211.431964088,
            208.205647068,
            205.021144765,
            201.878104774,
            198.776172855,
            195.714993069,
            192.69420792,
            189.713458496,
            186.7723846,
            183.870624887,
            181.007816998,
            178.183597686,
            175.39760295,
            172.649468155,
            169.938828161,
            167.265317442,
            164.628570205,
            162.028220508,
            159.463902374,
            156.935249902,
            154.441897379,
            151.983479385,
            149.559630898,
            147.169987396,
            144.814184957,
            142.491860356,
            140.202651158,
            137.946195811,
            135.722133737,
            133.530105415,
            131.369752467,
            129.240717743,
            127.142645393,
            125.075180951,
            123.037971404,
            121.030665269,
            119.052912657,
            117.104365342,
            115.184676828,
            113.293502406,
            111.430499221,
            109.595326321,
            107.787644721,
            106.007117448,
            104.253409599,
            102.526188383,
            100.825123174,
            99.1498855488,
            97.5001493351,
            95.875590648,
            94.2758879298,
            92.7007219858,
            91.1497760185,
            89.6227356605,
            88.1192890047,
            86.6391266331,
            85.1819416437,
            83.747429676,
            82.3352889339,
            80.9452202083,
            79.5769268966,
            78.2301150217,
            76.9044932488,
            75.5997729011,
            74.315667974,
            73.051895147,
            71.8081737958,
            70.5842260014,
            69.379776559,
            68.1945529852,
            67.0282855234,
            65.8807071494,
            64.7515535741,
            63.6405632463,
            62.5474773539,
            61.4720398239,
            60.4139973219,
            59.3730992498,
            58.3490977429,
            57.3417476666,
            56.3508066109,
            55.3760348855,
            54.4171955128,
            53.4740542206,
            52.5463794343,
            51.6339422678,
            50.7365165137,
            49.8538786335,
            48.985807746,
            48.132085616,
            47.2924966418,
            46.4668278423,
            45.654868844,
            44.8564118661,
            44.0712517066,
            43.2991857273,
            42.5400138377,
            41.7935384795,
            41.05956461,
            40.3378996854,
            39.6283536431,
            38.9307388849,
            38.2448702583,
            37.5705650387,
            36.9076429105,
            36.2559259486,
            35.6152385987,
            34.9854076586,
            34.3662622578,
            33.7576338383,
            33.159356134,
            32.5712651509,
            31.9931991463,
            31.4249986083,
            30.8665062353,
            30.3175669149,
            29.7780277027,
            29.2477378019,
            28.7265485413,
            28.2143133548,
            27.7108877595,
            27.2161293347,
            26.7298977001,
            26.2520544949,
            25.7824633557,
            25.3209898955,
            24.8675016821,
            24.4218682162,
            23.9839609107,
            23.5536530686,
            23.130819862,
            22.7153383102,
            22.3070872593,
            21.9059473598,
            21.5118010465,
            21.1245325166,
            20.7440277088,
            20.3701742826,
            20.0028615973,
            19.6419806909,
            19.2874242599,
            18.9390866385,
            18.5968637779,
            18.2606532263,
            17.9303541086,
            17.6058671059,
            17.2870944362,
            16.9739398339,
            16.6663085303,
            16.3641072342,
            16.0672441121,
            15.7756287695,
            15.4891722308,
            15.2077869212,
            14.9313866474,
            14.6598865791,
            14.3932032301,
            14.1312544406,
            13.8739593581,
            13.6212384202,
            13.373013336,
            13.129207069,
            12.889743819,
            12.654549005,
            12.4235492479,
            12.1966723536,
            11.9738472959,
            11.7550041997,
            11.5400743249,
            11.3289900496,
            11.1216848541,
            10.918093305,
            10.7181510389,
            10.5217947474,
            10.3289621608,
            10.1395920336,
            9.95362412882,
            9.77099920301,
            9.59165899172,
            9.4155461947,
            9.24260446144,
            9.07277837691,
            8.90601344742,
            8.74225608669,
            8.58145360204,
            8.42355418079,
            8.26850687683,
            8.11626159733,
            7.96676908962,
            7.81998092828,
            7.6758495023,
            7.53432800254,
            7.39537040921,
            7.25893147963,
            7.12496673606,
            6.99343245374,
            6.86428564909,
            6.73748406805,
            6.61298617456,
            6.49075113925,
            6.37073882821,
            6.25290979197,
            6.13722525464,
            6.02364710311,
            5.91213787651,
            5.80266075574,
            5.69517955319,
            5.58965870257,
            5.48606324894,
            5.38435883878,
            5.2845117103,
            5.18648868386,
            5.09025715249,
            4.99578507259,
            4.90304095475,
            4.81199385471,
            4.72261336441,
            4.63486960325,
            4.54873320941,
            4.4641753313,
            4.38116761922,
            4.299682217,
            4.21969175392,
            4.14116933662,
            4.06408854124,
            3.98842340557,
            3.91414842141,
            3.84123852702,
            3.76966909963,
            3.69941594816,
            3.63045530596,
            3.56276382371,
            3.49631856246,
            3.43109698666,
            3.36707695746,
            3.30423672596,
            3.24255492668,
            3.18201057106,
            3.12258304108,
            3.06425208303,
            3.00699780128,
            2.95080065226,
            2.8956414384,
            2.84150130233,
            2.78836172102,
            2.73620450011,
            2.6850117683,
            2.63476597179,
            2.5854498689,
            2.53704652469,
            2.48953930571,
            2.44291187481,
            2.39714818607,
            2.35223247976,
            2.30814927745,
            2.26488337712,
            2.22241984841,
            2.18074402793,
            2.13984151462,
            2.09969816524,
            2.06030008989,
            2.02163364761,
            1.98368544205,
            1.94644231724,
            1.90989135342,
            1.87401986287,
            1.83881538594,
            1.80426568703,
            1.77035875068,
            1.73708277774,
            1.70442618157,
            1.67237758434,
            1.64092581337,
            1.61005989751,
            1.57976906365,
            1.55004273319,
            1.52087051867,
            1.49224222037,
            1.46414782303,
            1.4365774926,
            1.40952157304,
            1.38297058318,
            1.35691521364,
            1.33134632378,
            1.30625493873,
            1.28163224648,
            1.25746959493,
            1.23375848915,
            1.21049058849,
            1.18765770395,
            1.1652517954,
            1.14326496898,
            1.1216894745,
            1.10051770288,
            1.07974218361,
            1.05935558234,
            1.0393506984,
            1.01972046244,
            1.00045793409,
            0.98155629966,
            0.963008869849,
            0.944809077556,
            0.926950475678,
            0.909426734964,
            0.892231641905,
            0.875359096664,
            0.858803111035,
            0.842557806438,
            0.82661741196,
            0.810976262414,
            0.795628796442,
            0.780569554652,
            0.76579317778,
            0.751294404887,
            0.737068071596,
            0.723109108344,
            0.70941253868,
            0.695973477583,
            0.682787129811,
            0.669848788285,
            0.657153832494,
            0.64469772693,
            0.632476019555,
            0.620484340287,
            0.608718399522,
            0.597173986675,
            0.585846968746,
            0.574733288921,
            0.563828965185,
            0.553130088969,
            0.542632823816,
            0.532333404071,
            0.522228133599,
            0.512313384519,
            0.502585595965,
            0.493041272867,
            0.483676984752,
            0.474489364574,
            0.465475107554,
            0.456630970048,
            0.447953768435,
            0.439440378019,
            0.431087731957,
            0.422892820205,
            0.414852688479,
            0.406964437236,
            0.399225220678,
            0.391632245769,
            0.384182771268,
            0.376874106785,
            0.369703611849,
            0.362668694998,
            0.355766812876,
            0.348995469358,
            0.34235221468,
            0.335834644595,
            0.329440399533,
            0.323167163786,
            0.3170126647,
            0.310974671889,
            0.305050996455,
            0.299239490229,
            0.293538045022,
            0.28794459189,
            0.282457100413,
            0.277073577987,
            0.271792069129,
            0.266610654791,
            0.261527451694,
            0.256540611665,
            0.251648320996,
            0.246848799801,
            0.242140301401,
            0.237521111708,
            0.232989548623,
            0.228543961449,
            0.224182730308,
            0.219904265576,
            0.215707007323,
            0.211589424763,
            0.207550015716,
            0.203587306085,
            0.199699849327,
            0.195886225953,
            0.192145043021,
            0.18847493365,
            0.184874556533,
            0.181342595468,
            0.17787775889,
            0.174478779417,
            0.171144413401,
            0.167873440487,
            0.164664663183,
            0.161516906436,
            0.158429017217,
            0.155399864109,
            0.152428336909,
            0.149513346234,
            0.146653823131,
            0.143848718705,
            0.141097003739,
            0.138397668333,
            0.135749721542,
            0.133152191027,
            0.130604122706,
            0.128104580416,
            0.125652645581,
            0.123247416882,
            0.120888009936,
            0.118573556986,
            0.116303206582,
            0.114076123288,
            0.111891487375,
            0.109748494533,
            0.107646355582,
            0.105584296191,
            0.103561556601,
            0.101577391351,
            0.0,
            ])
        self.refca = 1121
        self.catmp = 0.
        self.reftmp = 0
        self.r = ode(self.fun_u).set_integrator('dop853', rtol=1e-3,
                                                nsteps=500)
        self.r.set_initial_value(self.u, 0.)

    def compute_u(self, G_exc, G_inh, I_curr):

        self.counter = 0
        self.distal_cnt = 0
        self.r.y[11] += G_exc[0, 0] * np.exp(1) / self.Tau_synE[0, 0]
        self.r.y[13] += G_inh[0, 0] * np.exp(1) / self.Tau_synI[0, 0]
        self.r.y[7] += G_exc[1, 0] * np.exp(1) / self.Tau_synE[1, 0]
        self.r.y[9] += G_inh[1, 0] * np.exp(1) / self.Tau_synI[1, 0]
        self.r.y[3] += G_exc[2, 0] * np.exp(1) / self.Tau_synE[2, 0]
        self.r.y[5] += G_inh[2, 0] * np.exp(1) / self.Tau_synI[2, 0]
        self.r.integrate(self.r.t + self.resolution)
        self.u = self.r.y

        if self.reftmp > 0:
            self.reftmp -= 1
            self.catmp = self.ca[self.refca - self.reftmp]
        else:
            if self.u[2] >= self.thca:
                self.reftmp = self.refca
                self.catmp = self.ca[0]


@unittest.skipIf(not HAVE_GSL, 'GSL is not available')
class FixedMultiCmptNeuTestCase(unittest.TestCase):

    def test_FixedMultiCmptNeu(self):

        trial_num = 1

        active_flag = 1
        resolution = 0.1
        sim_time = 1500
        l = int(sim_time / resolution)
        t2 = np.linspace(0.1, 1500., 15000)
        rate = 0.0008
        mother_rate = 0.005
        neur = mc_neuron_ode(active_flag, resolution)
        soma_flag = 0
        dist_flag = 0
        input_frac = 1.
        copy_frac = 0.2
        dist_inh_ratio = 1.
        amp_exc = 200.
        amp_inh = 100.
        tot_exc = 3
        tot_inh = 3
        E_L = -70.
        I_s = np.zeros((3, int(sim_time / resolution)))
        exc_wt = np.ones((tot_exc, 1))
        inh_wt = np.ones((tot_inh, 1))
        u_arr = np.ones((3, l))
        u_arr[0, :] = u_arr[0, :] * -70.
        u_arr[1, :] = u_arr[1, :] * -65.
        u_arr[2, :] = u_arr[2, :] * -60.
        exc_g_arr = np.zeros((3, l))
        inh_g_arr = np.zeros((3, l))
        ca_arr = np.zeros(l)
        VT_arr = np.ones(l) * -45.
        dist_VT_arr = np.ones(l) * -20.
        leak_g_arr = np.zeros((3, l))
        tmp_exc_cmpt = np.reshape(np.zeros(3), (3, 1))
        tmp_inh_cmpt = np.reshape(np.zeros(3), (3, 1))
        spike_cnt = 0
        exc_input_arr = np.zeros([tot_exc, l])
        inh_input_arr = np.zeros([tot_inh, l])
        exc_input_arr[2, 1000] = 1

        for t in range(0, l):

            tmp_exc = amp_exc * exc_wt * np.reshape(exc_input_arr[:,
                                                    t], (tot_exc, 1))
            tmp_inh = amp_inh * inh_wt * np.reshape(inh_input_arr[:,
                                                    t], (tot_inh, 1))
            tmp_curr = np.reshape(I_s[:, t], (3, 1))

            tmp_exc_cmpt[0, 0] = tmp_exc[0, 0]
            tmp_exc_cmpt[1, 0] = tmp_exc[1, 0]
            tmp_exc_cmpt[2, 0] = tmp_exc[2, 0]
            tmp_inh_cmpt[0, 0] = tmp_inh[0, 0]
            tmp_inh_cmpt[1, 0] = tmp_inh[1, 0]
            tmp_inh_cmpt[2, 0] = tmp_inh[2, 0]

            neur.compute_u(tmp_exc_cmpt, tmp_inh_cmpt, tmp_curr)
            u_arr[:, t] = neur.u[0:3]
            exc_g_arr[2, t] = neur.u[4]
            inh_g_arr[2, t] = neur.u[6]
            exc_g_arr[1, t] = neur.u[8]
            inh_g_arr[1, t] = neur.u[10]
            exc_g_arr[0, t] = neur.u[12]
            inh_g_arr[0, t] = neur.u[14]

            leak_g_arr[:, t] = np.reshape(neur.G_l, (1, 3))

        c_p = 18.
        glp = 5.
        gpd = 25.
        gsp = 25.

        gld = 5.
        gls = 5.
        c_d = 13.
        c_s = 43.
        eld = -60.
        elp = -65.
        els = -70.
        leak = -60.000004268845181
        leak = -60.00000001

        nest.ResetKernel()

        # Obtain receptor dictionary

        syns = nest.GetDefaults('iaf_cond_alpha_mc_fixedca'
                                )['receptor_types']

        # print "iaf_cond_alpha_mc receptor_types: ", syns

        # Obtain list of recordable quantities

        rqs = nest.GetDefaults('iaf_cond_alpha_mc_fixedca'
                               )['recordables']

        # print "iaf_cond_alpha_mc recordables   : ", rqs

        # Change some default values:
        #  - threshold potential
        #  - reset potential
        #  - refractory period
        #  - somato-proximal coupling conductance
        #  - somatic leak conductance
        #  - proximal synaptic time constants
        #  - distal capacitance

        nest.SetDefaults('iaf_cond_alpha_mc_fixedca', {
            'g_sp': gsp,
            'g_pd': gpd,
            'V_th': 955.0,
            'Ca_active': True,
            'jump_Th': 0.,
            'tau_Th': 1.,
            'distal': {
                't_L': gld,
                'nt_L': gld,
                'E_L': eld,
                'tau_syn_ex': 1.,
                'tau_syn_in': 2.0,
                'C_m': c_d,
                'amp_curr_AP': 0.,
                'tau_curr_AP': 1.,
                },
            'proximal': {
                't_L': glp,
                'nt_L': glp,
                'E_L': elp,
                'tau_syn_ex': 1.,
                'tau_syn_in': 2.0,
                'C_m': c_p,
                'amp_curr_AP': 0.,
                'tau_curr_AP': 1.,
                },
            'soma': {
                't_L': 150.,
                'nt_L': gls,
                'E_L': els,
                'tau_syn_ex': 1.,
                'tau_syn_in': 2.0,
                'C_m': c_s,
                'amp_curr_AP': 0.,
                'tau_curr_AP': 1.,
                },
            })

        # Create neuron

        n = nest.Create('iaf_cond_alpha_mc_fixedca')

        # Create multimeter recording everything, connect

        mm = nest.Create('multimeter', params={'record_from': rqs,
                         'interval': 0.1})
        nest.Connect(mm, n)
        sgs = nest.Create('spike_generator', 6)
        nest.SetStatus([sgs[0]], [{'spike_times': [99.0]}])  # distal
        nest.SetStatus([sgs[1]], [{'spike_times': [109.0]}])  # distal
        nest.SetStatus([sgs[2]], [{'spike_times': [499.0]}])  # distal
        nest.SetStatus([sgs[3]], [{'spike_times': [509.0]}])  # distal
        nest.SetStatus([sgs[4]], [{'spike_times': [899.0]}])  # distal
        nest.SetStatus([sgs[5]], [{'spike_times': [909.0]}])  # distal

        # Connect generators to correct compartments

        nest.Connect([sgs[0]], n,
                     syn_spec={'receptor_type': syns['distal_exc'],
                               'weight': amp_exc, 'delay': 1.})
        sd = nest.Create('spike_detector', 1)
        nest.Connect(n, sd)

        # Simulate

        nest.Simulate(1500)
        rec = nest.GetStatus(mm)[0]['events']
        t1 = rec['times']
        error = np.sqrt((u_arr[2, :14990] - rec['V_m.d']) ** 2)
        self.assertTrue(np.max(error) < 4.0e-4)


def suite():
    suite = unittest.makeSuite(FixedMultiCmptNeuTestCase, 'test')
    return suite


def run():
    runner = unittest.TextTestRunner(verbosity=2)
    runner.run(suite())


if __name__ == '__main__':
    run()
