/*
 *  test_gif_pop_psc_exp.sli
 *
 *  This file is part of NEST.
 *
 *  Copyright (C) 2004 The NEST Initiative
 *
 *  NEST is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  NEST is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with NEST.  If not, see <http://www.gnu.org/licenses/>.
 *
 */


/* BeginDocumentation
Name: testsuite::test_gif_pop_psc_exp - sli script for test of gif_pop_psc_exp

Synopsis: (test_gif_pop_psc_exp) run -> compare mean and variance of population rate of the model with desired values

Description:
 
 This script simulate an inhibitory population with the population model. After each simulation, it calculates
 the mean and variance of population rate and compare them with desired values. The simulated values should be 
 in a acceptable margin.


Author:  December 2017, Setareh, Schwalger
SeeAlso: gif_pop_psc_exp, testsuite::test_pp_pop_psc_delta

*/

(unittest) run
/unittest using

% This test should only run if we have GSL
skip_if_without_gsl

1.0 /err_mean Set      % error margin for mean rate (Hz)
6.0 /err_var Set       % error margin for variance of rate (Hz^2)
0.5 /res Set           % simulation time step (ms)
10000.0 /T Set         % simulation duration (ms)
1000.0 /start_time Set % time for starting calculating mean and variance (ms)

start_time res div int /start_step Set
T 1 sub res div start_step sub int /remaining_step Set

/inh_test
{

    500 /pop_size Set
    22.0 /expected_rate Set
    102.0 /expected_var Set

    ResetKernel
    0 << 
       /resolution res
      >> SetStatus

    /gif_pop_psc_exp Create /node Set

    <<
      /N pop_size
      /V_reset 0.0
      /V_T_star 10.0
      /E_L 0.0
      /Delta_V 2.0
      /C_m 250.0
      /tau_m 20.0
      /t_ref 4.0
      /I_e 500.0
      /lambda_0 10.0
      /tau_syn_in 2.0
      /tau_sfa [ 500.0 ]
      /q_sfa [ 1.0 ]
    >> /params_pop Set
    
    node params_pop SetStatus
    
    /static_synapse << /delay 1.0 /weight -6.25 >> SetDefaults
    node node Connect

    /voltmeter Create /vm Set
    vm << /record_from [ /n_events ] /interval res >> SetStatus
    vm node Connect

    T Simulate
    
    vm GetStatus /events get /n_events get
    {} forall remaining_step arraystore /nspike Set % removing initial elements
    clear

    nspike Plus remaining_step div /mean_nspike Set % calculating mean nspike
    mean_nspike pop_size div res div 1000.0 mul /mean_rate Set % convert to mean rate

    nspike nspike mul Plus remaining_step div mean_nspike sqr sub /var_nspike Set % calculating var of nspike
    var_nspike pop_size div res div 1000.0 mul
    pop_size div res div 1000.0 mul /var_rate Set % convert to var of rate

    mean_rate expected_rate sub abs
    err_mean leq assert_or_die

    var_rate expected_var sub abs
    err_var leq assert_or_die
} def

inh_test
