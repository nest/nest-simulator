/*
 *  test_connect.sli
 *
 *  This file is part of NEST.
 *
 *  Copyright (C) 2004 The NEST Initiative
 *
 *  NEST is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  NEST is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with NEST.  If not, see <http://www.gnu.org/licenses/>.
 *
 */


/** @BeginDocumentation
   Name: testsuite::test_connect - SLI script to test runability of all Connect variants

   Synopsis: (test_connect) run

   Description:

   Tests if all variants of Connect can be run. This test checks the
   outcome of the calls only in a minimal way. A more comprehensive
   set of tests is available in PyNEST. It also checks the given
   parameters more thoroughly and looks at statistics of the resulting
   connectivity.

   FirstVersion: April 2014
   Author: Jochen Martin Eppler
   SeeAlso: Connect
 */

M_ERROR setverbosity

(unittest) run
/unittest using

(Running Connect tests with legal arguments) =

(  Testing variant "NodeCollection NodeCollection") =
ResetKernel
/a /iaf_psc_alpha 3 Create def
/b /iaf_psc_alpha 3 Create def
a b Connect
<< /source a >> GetConnections dup
First /target get 4 eq assert_or_die
Last /target get 6 eq assert_or_die

(  Testing variant "NodeCollection NodeCollection double double") =
ResetKernel
/a /iaf_psc_alpha 3 Create def
/b /iaf_psc_alpha 3 Create def
a b 2.0 3.0 Connect
<< /source a >> GetConnections dup
First dup dup
/target get 4 eq assert_or_die
/weight get 2.0 eq assert_or_die
/delay get 3.0 eq assert_or_die
Last /target get 6 eq assert_or_die

(  Testing variant "NodeCollection NodeCollection double double literal") =
ResetKernel
/a /iaf_psc_alpha 3 Create def
/b /iaf_psc_alpha 3 Create def
a b 2.0 3.0 /static_synapse Connect
<< /source a >> GetConnections dup
First dup dup dup
/target get 4 eq assert_or_die
/weight get 2.0 eq assert_or_die
/delay get 3.0 eq assert_or_die
/synapse_model get /static_synapse eq assert_or_die
Last /target get 6 eq assert_or_die

(  Testing variant "NodeCollection NodeCollection literal") =
ResetKernel
/a /iaf_psc_alpha 3 Create def
/b /iaf_psc_alpha 3 Create def
a b /one_to_one Connect
<< /source a >> GetConnections dup
First /target get 4 eq assert_or_die
Last /target get 6 eq assert_or_die

(  Testing variant "NodeCollection NodeCollection dict") =
ResetKernel
/a /iaf_psc_alpha 3 Create def
/b /iaf_psc_alpha 3 Create def
a b << /rule /one_to_one >> Connect
<< /source a >> GetConnections dup
First /target get 4 eq assert_or_die
Last /target get 6 eq assert_or_die

(  Testing variant "NodeCollection NodeCollection empty_dict") =
ResetKernel
/a /iaf_psc_alpha 3 Create def
/b /iaf_psc_alpha 3 Create def
a b << >> Connect
<< /source a >> GetConnections dup
First /target get 4 eq assert_or_die
Last /target get 6 eq assert_or_die

(  Testing variant "NodeCollection NodeCollection literal literal") =
ResetKernel
/a /iaf_psc_alpha 3 Create def
/b /iaf_psc_alpha 3 Create def
a b /one_to_one /stdp_synapse Connect
<< /source a >> GetConnections dup
First /target get 4 eq assert_or_die
Last /target get 6 eq assert_or_die

(  Testing variant "NodeCollection NodeCollection dict literal") =
ResetKernel
/a /iaf_psc_alpha 3 Create def
/b /iaf_psc_alpha 3 Create def
a b << /rule /one_to_one >> /stdp_synapse Connect
<< /source a >> GetConnections dup
First /target get 4 eq assert_or_die
Last /target get 6 eq assert_or_die

(  Testing variant "NodeCollection NodeCollection empty_dict literal") =
ResetKernel
/a /iaf_psc_alpha 3 Create def
/b /iaf_psc_alpha 3 Create def
a b << >> /stdp_synapse Connect
<< /source a >> GetConnections dup
First /target get 4 eq assert_or_die
Last /target get 6 eq assert_or_die

(  Testing variant "NodeCollection NodeCollection literal dict") =
ResetKernel
/a /iaf_psc_alpha 3 Create def
/b /iaf_psc_alpha 3 Create def
a b /one_to_one << /synapse_model /stdp_synapse >> Connect
<< /source a >> GetConnections dup
First /target get 4 eq assert_or_die
Last /target get 6 eq assert_or_die

(  Testing variant "NodeCollection NodeCollection literal empty_dict") =
ResetKernel
/a /iaf_psc_alpha 3 Create def
/b /iaf_psc_alpha 3 Create def
a b /one_to_one << >> Connect
<< /source a >> GetConnections dup
First /target get 4 eq assert_or_die
Last /target get 6 eq assert_or_die

(  Testing variant "NodeCollection NodeCollection dict dict") =
ResetKernel
/a /iaf_psc_alpha 3 Create def
/b /iaf_psc_alpha 3 Create def
a b << /rule /one_to_one >> << /synapse_model /stdp_synapse >> Connect
<< /source a >> GetConnections dup
First /target get 4 eq assert_or_die
Last /target get 6 eq assert_or_die

(  Testing variant "NodeCollection NodeCollection empty_dict dict") =
ResetKernel
/a /iaf_psc_alpha 3 Create def
/b /iaf_psc_alpha 3 Create def
a b << >> << /synapse_model /stdp_synapse >> Connect
<< /source a >> GetConnections dup
First /target get 4 eq assert_or_die
Last /target get 6 eq assert_or_die

(  Testing variant "NodeCollection NodeCollection dict empty_dict") =
ResetKernel
/a /iaf_psc_alpha 3 Create def
/b /iaf_psc_alpha 3 Create def
a b << /rule /one_to_one >> << >> Connect
<< /source a >> GetConnections dup
First /target get 4 eq assert_or_die
Last /target get 6 eq assert_or_die

(  Testing variant "NodeCollection NodeCollection empty_dict empty_dict") =
ResetKernel
/a /iaf_psc_alpha 3 Create def
/b /iaf_psc_alpha 3 Create def
a b << >> << >> Connect
<< /source a >> GetConnections dup
First /target get 4 eq assert_or_die
Last /target get 6 eq assert_or_die


(Running Connect tests with illegal combinations) =
ResetKernel

/n_connections 0 def
GetKernelStatus /node_models get
{
  Create /node_a Set
  GetKernelStatus /node_models get
  {
    Create /node_b Set

    % try to connect node_a and node_b
    {
      node_a node_b Connect
    } stopped not
    {  % if there is no error, check that a connection has been made
      {
        n_connections 1 add
        GetKernelStatus /num_connections get
        eq
      } assert_or_die
      /n_connections n_connections 1 add def
    }
    {
      5 npop
    } ifelse
  } forall

} forall
