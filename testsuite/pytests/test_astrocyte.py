# -*- coding: utf-8 -*-
#
# test_astrocyte.py
#
# This file is part of NEST.
#
# Copyright (C) 2004 The NEST Initiative
#
# NEST is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# NEST is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NEST.  If not, see <http://www.gnu.org/licenses/>.

"""
Test the astrocyte_lr_1994 model against SciPy reference solution.

This test compares the output of NEST's implementation of an astrocyte model,
astrocyte_lr_1994, against the reference data stored in ``test_astrocyte.dat``,
which has been generated by the SciPy ODEINT solver (see `NEST implementation of
the astrocyte_lr_1994 model
<doc/htmldoc/model_details/astrocyte_model_implementation.ipynb>`_).

We assess that the difference between the recorded variables and the reference
is smaller than the default tolerance given by pytest.approx().
"""

import os

import nest
import numpy as np
import pytest

pytestmark = pytest.mark.skipif_missing_gsl
path = os.path.abspath(os.path.dirname(__file__))


def test_closeness_nest_odeint():
    """Compare the astrocyte model to the reference (ODEINT) implementation."""

    # simulation parameters as in the reference solution
    simtime = 100.0
    spike_times = [10.0 - nest.resolution]  # compensate for delay
    spike_weights = [1.0]

    # get reference data
    odeint = np.loadtxt(os.path.join(path, "test_astrocyte.dat")).T
    ref_ip3 = odeint[1, :]
    ref_ca = odeint[2, :]
    ref_h_ip3r = odeint[3, :]

    # create astrocyte and devices
    # initial values of the state variables as in the reference solution
    astrocyte = nest.Create("astrocyte_lr_1994", params={"IP3": 1.0, "Ca": 1.0, "h_IP3R": 1.0})
    mm = nest.Create(
        "multimeter",
        {"interval": nest.resolution, "record_from": ["IP3", "Ca", "h_IP3R"]},
    )
    spk_ge = nest.Create("spike_generator", {"spike_times": spike_times, "spike_weights": spike_weights})

    # connect astrocyte to devices
    nest.Connect(mm, astrocyte)
    nest.Connect(spk_ge, astrocyte, syn_spec={"delay": nest.resolution})

    # simulate
    nest.Simulate(simtime)

    # compare results with reference data
    assert mm.events["IP3"] == pytest.approx(ref_ip3)
    assert mm.events["Ca"] == pytest.approx(ref_ca)
    assert mm.events["h_IP3R"] == pytest.approx(ref_h_ip3r)
