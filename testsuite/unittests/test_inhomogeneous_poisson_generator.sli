/*
 *  test_inhomogeneous_poisson_generator.sli
 *
 *  This file is part of NEST.
 *
 *  Copyright (C) 2004 The NEST Initiative
 *
 *  NEST is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  NEST is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with NEST.  If not, see <http://www.gnu.org/licenses/>.
 *
 */


/* BeginDocumentation
   Name: testsuite::test_inhomogeneous_poisson_generator - sli script to test
   inhomogeneous_poisson_generator device

   Synopsis: (test_inhomogeneous_poisson_generator) run

   Description:
   test_inhomogeneous_poisson_generator checks the
   inhomogeneous_poisson_generator device and its
   consistency with the nest simulation kernel.


   FirstVersion: December 2017
   Author: Barna Zajzon
 */

(unittest) run
/unittest using

% Test 1.a
% Rate times and values must be set together.
{
  ResetKernel
  0 <<
      /local_num_threads 1
      /resolution 0.1
  >> SetStatus

  /inhomogeneous_poisson_generator Create /ipg Set
  ipg <<
        /rate_times [1.]
  >> SetStatus
}
fail_or_die

% Test 1.b
% Rate times and values must be set together.
{
  ResetKernel
  0 <<
      /local_num_threads 1
      /resolution 0.1
  >> SetStatus

  /inhomogeneous_poisson_generator Create /ipg Set
  ipg <<
        /rate_values [10.]
  >> SetStatus
}
fail_or_die

% Test 2
% Length of rate times and values must match.
{
  ResetKernel
  0 <<
      /local_num_threads 1
      /resolution 0.1
  >> SetStatus

  /inhomogeneous_poisson_generator Create /ipg Set
  ipg <<
        /rate_times [1. 2.]
        /rate_values [10.]
  >> SetStatus
}
fail_or_die

% Test 3
% Rate times must be strictly increasing.
{
  ResetKernel
  0 <<
      /local_num_threads 1
      /resolution 0.1
  >> SetStatus

  /inhomogeneous_poisson_generator Create /ipg Set
  ipg <<
        /rate_times [1. 5. 3.]
        /rate_values [10. 20. 5.]
  >> SetStatus
}
fail_or_die

% Test 4.a
% Try offgrid time point.
{
  ResetKernel
  0 <<
      /local_num_threads 1
      /resolution 0.1
  >> SetStatus

  /inhomogeneous_poisson_generator Create /ipg Set
  ipg <<
        /rate_times [1.23]
        /rate_values [10.]
  >> SetStatus
}
fail_or_die

% Test 4.b
% Try wrong time point representation but allow offgrid times.
{
  ResetKernel
  0 <<
      /local_num_threads 1
      /resolution 0.1
  >> SetStatus

  /ipg /inhomogeneous_poisson_generator << /allow_offgrid_times true >> Create def

  ipg <<
        /rate_times [1.23]
        /rate_values [10.]
  >> SetStatus
}
pass_or_die

% Test 5.a
% allow_offgrid_times can't be modified separately after rates have been set.
{
  ResetKernel
  0 <<
      /local_num_threads 1
      /resolution 0.1
  >> SetStatus

  /ipg /inhomogeneous_poisson_generator Create def

  ipg <<
      /rate_times [1.2]
      /rate_values [10.]
  >> SetStatus

  ipg <<
      /allow_offgrid_times true
  >> SetStatus
}
fail_or_die

% Test 5.b
% allow_offgrid_times can't be modified separately after rates have been set.
{
  ResetKernel
  0 <<
      /local_num_threads 1
      /resolution 0.1
  >> SetStatus

  /ipg /inhomogeneous_poisson_generator << /allow_offgrid_times true >> Create def

  ipg <<
      /rate_times [1.23]
      /rate_values [10.]
  >> SetStatus

  ipg <<
      /allow_offgrid_times false
      /rate_times [1.25]
      /rate_values [10.]
  >> SetStatus
}
fail_or_die

% Test 6
% time points should lie strictly in the future.
{
  ResetKernel
  0 <<
      /local_num_threads 1
      /resolution 0.1
  >> SetStatus

  /inhomogeneous_poisson_generator Create /ipg Set
  ipg <<
        /rate_times [0.]
        /rate_values [30.]
  >> SetStatus
}
fail_or_die
