/*
 *  helpinit.sli
 *
 *  This file is part of NEST.
 *
 *  Copyright (C) 2004 The NEST Initiative
 *
 *  NEST is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  NEST is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with NEST.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/* 
    Sli-commands initializing Online-help.

*/


/HelpRoot    statusdict /prgdocdir get (/help)       join def
/HelpdeskURL statusdict /prgdocdir get (/index.html) join def
/HelpExtension (.hlp)  def
/TextIndexFilename (helpindex.hlp)  def
/CPPHelpRoot    HelpRoot (/) join (cc)  join def
/SLIHelpRoot    HelpRoot (/) join (sli) join def
/HelpSearchPath [CPPHelpRoot SLIHelpRoot]    def

/SimpleKeyword
  ((Name:|Synopsis:|Description:|Parameters:|Options:|Examples:|Bugs:|Diagnostics:|Author:|FirstVersion:|Remarks:|Availability:|References:|Source:|Sends:|Receives:|Transmits:))
regcomp def

/ReferencingKeyword
  ((SeeAlso:|Variants:))
regcomp def

/InvariantsKeyword
  ((Examples:))
regcomp def


/** @BeginDocumentation
Name: ppage - print a file to cout in chunks of 20 lines.

Description:
This is a "poor man's pager" implemented in SLI. It can be used when
no external pager program is available.

Synopsis:
      ifstream   ppage -> -
      (filename) ppage -> - 

Diagnostics:
If a filename is given and does not exist, /FileOpenError is raised.
If an ifstream is given, it will be closed by ppage.

Author: Marc-Oliver Gewaltig, R Kupper

FirstVersion: 27-sep-2007

SeeAlso: page
*/
/ppage [/istreamtype]
{
  {
    () =  
    20
    {
        getline
        { (> ) =only = } {exit} ifelse
    } repeat
    igood not {exit} if
    () =    
    (Press <RETURN> to continue or "q <RETURN>" to quit. ) readline
    {      
     0 get 113 eq {exit} if 
    } if
  } loop
  closeistream
  () =  
} def  

/ppage [/stringtype]
{
  dup
  ifstream not
  {
    /ppage /FileOpenError raiseerror    
  } if
  ppage  
  pop  
} def


/** @BeginDocumentation
Name: page - Conveniently display contents of a long file

Synopsis: (filename) page -> - 

Description:
  The "page" command is used by NEST's online-help system to display
  the help pages. It displays the contents of a file, either through a
  built-in pager, or an external pager program.

Options:
  /command - UNIX command to display a file (default: see below)
  
    /command can be either false or a string.
    If /command is set to false, "page" uses the simple built-in
    pager "ppage" for display.
  
    If it is set to the name of a UNIX program, "page" will execute
    this program as a child process, passing the name of the
    file as argument.
  
    /command defaults to the contents of the $PAGER environment
    variable. If this variable is not set, it defaults to (more).
  
  /wait - whether to wait for the UNIX program to finish. (default: true)
  
    If /wait is set to true, the "page" command will not return until
    the UNIX process is terminated. Use this setting for all pager
    programs that write to stdout.
  
    If /wait is set to false, "page" will return immediately after
    creating the child process. Use this setting for all pager programs
    that open up their own window.
  
    The value of /wait is ignored, if /command is set to false.

Examples:
  The following example displays the license agreement that came with
  your copy of NEST:

  "statusdict /prgdatadir get (/LICENSE) join page"

Bugs: The string contained in /command is processed by "breakup" to separate
      the command from its parameters. Be aware that there is a bug in the
      "breakup"-routine, which makes it impossible to pass a parameter
      containing blanks by enclosing it in quotation marks.

      WARNING: Setting the /wait option to false with a pager
      program that writes to stdout will screw up your SLI prompt.

Author: R Kupper

FirstVersion: Apr 22 1999, reworked 27-sep-2007

Remarks: If /wait is set to false, the "system"-command is called in
          no-care-mode. Be aware that this may be an expensive operation
          depending on the ressources your SLI-process occupies.
          (see description of "system").
         Even if /wait is set to true, creation of a child process may
          be expensive. To avoid any overhead caused by process creation, set /command
          to false.

SeeAlso: help, helpindex, license, system
*/

/page <<
    /command  (PAGER) getenv not {(more)} if
    /wait     true
>> Options

/page [/stringtype]
{
  /page /command GetOption false eq not % Is there a Pager program to use?
  {%yes, there is a Pager
    /page /wait GetOption % Shall we wait for its termination?
    {%yes, we shall wait for termination of pager process
      /page /command GetOption ( ) breakup exch append 0 system % Spawn Pager Program to display text
      2 npop % Wait for Pager process to terminate and clear stack
    }
    {%no, we shall not wait for termination of pager process
      /page /command GetOption ( ) breakup exch append 1 system % Spawn orphaned Pager process to display text
    }
    ifelse
  }
  {%no, there is no Pager. So use our built-in poor man's pager:
    ppage
  }
  ifelse
} def  


/** @BeginDocumentation
 Name: help - prints help text for a given command

 Synopsis: /name help -> -

 Description:
   help displays the online help file of the command /name.
   This documantation is created during installation.

   help uses the command "page" to display its information.
   Type
       /page help
   to learn how to customize the output of this command.

 Parameters: 
   /name is the command you want to read a help about.

 Examples: 
   /help help %prints this text.
   /page help %learn how to customize the output of the help command
   /ThisIsDefinitelyNoCommand help %raises a NoHelpInformationError.

 Bugs: 

 Author: Diesmann, Hehl, R Kupper

 FirstVersion: 26.3.1999

 Remarks:
  help uses the command "page" to display its information.
  Type
      /page help
  to learn how to customize the output of this command.

  Commented 13 April, 1999

  Developers are kindly requested to use our conventional header for
  commenting any new and all those older commands.

 SeeAlso: page, helpindex, helpdesk, apropos, which
*/

/help_l
{
 cvs HelpExtension join
  HelpSearchPath exch LocateFileNames  %Find *.hlp-File in HelpSearchPath
  dup [] eq not %Was a help file found?

  {%yes, a helpfile was found
    0 get page    
  }
  {%no, no helpfile was found
	/help /NoHelpInformationError raiseerror
  } ifelse
} bind def

/help_any
{
   /help help_l
  /help /LiteralExpected raiseerror
} def

/help_ trie
  [/literaltype] /help_l load addtotrie
  [/stringtype] {cvlit help_l} addtotrie
  [/anytype] /help_any load addtotrie
def

/help
{
  count 0 eq
  {
    :helptext    
  }
  {  
    help_
  } ifelse
} def


/** @BeginDocumentation
 Name: helpindex - displays a list of all commands

 Synopsis: helpindex -> -

 Description:
   helpindex prints a list of all commands together with a short summary
   of their usage.

   helpindex uses the command "page" to display its information.
   Type
       /page help
   to learn how to customize the output of this command.

 Parameters: none

 Examples:
   helpindex --> lists all commands

 Bugs: Should work with a string parameter giving some letters or
 keywords, e.g. (ma) helpindex --> list of all commands beginning with ma
 or (file) helpindex --> list of all commands for filehandling!

 Author: Hehl

 FirstVersion: April 20, 1999

 Remarks: 
  helpindex uses the command "page" to display its information.
  Type
      /page help
  to learn how to customize the output of this command.

 SeeAlso: help, apropos, which
*/ 

/helpindex
{
 HelpRoot (/) join TextIndexFilename join
  page
} bind def

/* Documentation (not included in helpdesk)

 Name: :sort - dummy sorting via UNIX
 Synopsis: array :sort -> array
 Description:
   alphabetically sorts array via UNIX-sort. Don't know what happens
   to non-string arrays.
 Parameters:
 Examples: 
 Bugs: 
 Author: Hehl
 FirstVersion: May 19th, 1999
 Remarks: Waiting for our real sorting mechanism as discussed on our
 17/18 May meeting ...
 SeeAlso: 
*/ 

/:sort_a
{  << >> begin
    (sort) spawn /i Set /o Set
    {
      o exch <- endl ;
    } forall
    o closeostream
    [] i
    {
      getline not
      {exit} if
      /zeile Set
      exch zeile append exch
    } loop  
    closeistream
  end
} bind def


/:sort trie
  [/arraytype] /:sort_a load addtotrie
def


/** @BeginDocumentation
Name: helpdesk - Display on-line help in external browser

Description:
  "helpdesk" opens a browser window with the SLI Online help. The
  browser executable to use must be specified by the user as a command
  option. (See "SetOptions" on how to do this.)

Options:
  /command - UNIX command to use as browser (default: firefox)
  
    /command is initially set to (firefox).
  
  /wait - whether to wait for the UNIX program to finish. (default: false)
  
    If /wait is set to true, the "helpdesk" command will not return until
    the UNIX process is terminated. Use this setting for all browsers that
    use the terminal exclusively.
  
    If /wait is set to false, "helpdesk" will return immediately after
    creating the child process. Use this setting for all browsers  that
    open up their own window.
  
    The value of /wait is ignored if /command is set to false.

Author: Gewaltig, Eppler, Kupper

SeeAlso: SetOptions, help, helpindex
*/

/helpdesk <<
    /command (firefox)
    /wait    false
>> Options

/:helpdesk_complete_command
{
  /helpdesk /command GetOption
  (^darwin) statusdict/hostos :: regex_find
  {
    % OSX, must use open -a <cmd> <url>
    (open -a ) exch join
  }
  if
  ( ) join
  HelpdeskURL join
} def

/helpdesk
{
  /helpdesk /command GetOption false eq not
  {
    /helpdesk /wait GetOption 
    {
      {
	:helpdesk_complete_command 0 system
	2 npop
      } stopped
    }
    {
      :helpdesk_complete_command 1 system 
    } ifelse
  }
  {
    M_ERROR (MissingOptionError) (NEST does not know how to connect to your browser. Please see the file helpinit.sli to learn how to tell NEST about your browser.) message
    /helpdesk /MissingOptionError raiseerror    
  } ifelse
} def


/** @BeginDocumentation
 Name: edit - Open a file in an external editor

 Synopsis: (filename) edit -> -

 Options:
  /command - UNIX command to edit a file (default: see below)
    /command can be either false or a string.
    If /command is set to false, "edit" will issue a message that informs
    about how to set the editor
  
    If it is set to the name of a UNIX program, "edit" will execute
    this program as a child process, passing the name of the
    file as argument.
  
    /command defaults to the contents of the $EDITOR environment
    variable. If this variable is not set, it defaults to false.
  
  /wait - whether to wait for the UNIX program to finish. (default: true)
  
    If /wait is set to true, the "edit" command will not return until
    the UNIX process is terminated. Use this setting for all editors
    that use the terminal exclusively.
  
    If /wait is set to false, "edit" will return immediately after
    creating the child process. Use this setting for all editors that
    open up their own window.
  
    The value of /wait is ignored, if /command is set to false.

 Description:
   Opens the file specified by filename.

 Parameters: 
   The name of a file to be edited (or created, if non-existent).

 Examples: (helloworld.sli) edit

 Bugs: 

 Author: Schrader

 FirstVersion:

 Remarks: The location of the file is only specified by the parameter;
   SLISearchPath is not scanned as e.g. in 'run'.

 SeeAlso: page, run
*/ 

/edit <<
    /command (EDITOR) getenv not {false} if
    /wait    true
>> Options

/edit [/stringtype]
{
 /edit /command GetOption false eq not
 { % yes, there is an Editor
  /edit /wait GetOption 
  { % yes, we shall wait for termination of editor process
   /edit /command GetOption ( ) join exch join 0 system
   2 npop
  }
  { % no, we shall not wait for termination of editor process
   /edit /command GetOption ( ) join exch join 1 system 
  }
  ifelse
 }
 {
   /edit MissingOptionError
 }ifelse
} bind def


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% experimental code for invariants and test driven 
% implementation
% 

/** @BeginDocumentation
 Name: --> - longrightarrow, usually delayed comparison
 Synopsis: --> -> /-->
 Description:
  The symbol --> is used in the example sections of the NEST 
  documentation to indicate the transformation an operator 
  performs to its arguments. The SLI operator --> is defined 
  to just reproduce itself. This enables NEST to evaluate the 
  example sections as regular SLI code. As a result, the arguments
  of the documented operator and its results are separated by 
  the literaal /-->. A parser for infix notation can then apply
  the documented operator to the values on the left side of -->
  and compare the results to the values on the right side of -->
 
 Examples: 
    [8 --> 6] --> 8 /--> cvx exec 6  3 arraystore 
 Author: Diesmann
 FirstVersion: 080506
 Remarks: 
  The idea of --> is to contribute to a notation for test driven
  programming and user documentation which keeps the syntactic 
  clutter at a minimum. 

 SeeAlso: helpdesk, EvaluateLiteralInfixes
*/ 
/--> /--> def



/** @BeginDocumentation
 Name: EvaluateLiteralInfixes - Evaluates an array of infix expressions  
 Synopsis: array -> array
 Description:
  The function evaluates an array of expressions assuming that every 
  literal is an infix operator. Inside this function --> is defined as 
  eq, the comparison for equality.
 Examples: 
   [ 5 /add 6 /sub 2] EvaluateLiteralInfixes --> [9]
   [ 5 --> 6 true ] EvaluateLiteralInfixes   --> [false true]
 Author: Diesmann
 FirstVersion: 080506
 Remarks:
  With the further development of test driven programming and unit
  testing in NEST, the function may develop into a more complete 
  parser for infix notation
 SeeAlso: helpdesk, -->
*/ 
/EvaluateLiteralInfixes
{
 << /--> /eq load >> begin

 % source array with infix expression
 container
 % source []
 {
  % loop over source array until empty
  exch empty
  {pop exit } if
  % target source
  dup First exch Rest
  % target f source
  rollu
  % source target f

  dup type
  /literaltype eq           % handle literal operators
  {  
   % source target f
   % f is a literal
   exch dup Most exch Last
   % source f target a
   4 -1 roll
   % f target a source
   dup Rest exch First
   % f target a source b
   exch
   % f target a b source 
   5 1 roll
   % source f target a b
   4 -1 roll
   % source target a b f
   cvn exec
   % source target abf
   append
   % source target
  }
  {                          % handle all operands
   % source target f
   % f is not a literal
   append
   % source target
  }
  ifelse
 } loop
 % target

 end
} def


/** @BeginDocumentation
 Name: validate - Check if a function is consistent with all its examples
 Synopsis: /literal -> boolean
 Description:

The function validate checks whether the examples in the documentation
of the function specified by the literal argument work as documented.
Every example in the example section is expected to result in a boolean
value. validate only returns true if the result of all examples is true.
In order to make the documentation of examples more readable validate 
supports a special (infix) syntax for the examples:
      a1 ... an --> b1 ...bm
is translated to 
      a b eq 
assuming that the sequence ai collapses to a and the sequence bj to b.
Thus, --> has delayed execution time and is only processed after all 
expressions in the example section have been executed once. The -->
expressions can be freely mixed with regular SLI code boolean 
expressions like
      a b eq    
The documentation of function Part contains several examples.

Before a function can be validated it needs to be registered with the 
help system. This is required because in SLI several functions can be 
defined in the same source file. Thus, only after processing the source
file SLI is aware of the functions implemented by this file. The help
system of SLI stores the path to the implementing file with the 
documentation of each function. Therefore, SLI can lookup the source 
code for each function without searching.

The typical workflow in test driven programming in SLI is as follows:
 1. create a new file myfunctions.sli
 2. write documentation including examples for one or
    more functions, e.g. /myfunc1
 3. run make installcheck
 4. implement /myfunc1
 5. call /myfunc1 validate
 6. continue with 4 (not 3) until validate is successful

The algorithm of function validate is as follows:
 1. find the help file (.hlp) for the specified function.
 2. obtain the source file implementing the function
    from the help file
 3. update the help file of the function
 4. construct target path for test files
 5. write some header
 6. copy the invariants
 7. write some footer
 8. run the test file

 Examples: 
    /Part validate     --> true 
%   /validate validate --> true   % infinite recursion
 Author: Diesmann
 FirstVersion: 080503
 Remarks: 
 The function is experimental. It constitutes a first attempt to
 provide support for test driven programming in NEST. A variant of 
 this function could easily print a detailed report of the test results
 and the intermediate generation of a test script is not necessary.
 In the present implementation validate updates the plain text help file
 (.hlp) but not the hypertext help (.html).
 SeeAlso: EvaluateLiteralInfixes, -->, Part, helpdesk
*/ 
/validate [/literaltype]
{

 % string name of function
 cvs /c Set
 % file name of test
 (test_) c join (.sli) join /cf Set

 % locate the help file
 c HelpExtension join
 HelpSearchPath exch LocateFileNames First
 /f Set

 % construct target path for test files
 %

 %% this code writes directly into the unittests directory
 % f (nest/help) search 
 % pop /base Set pop pop
 % base (nest/unittests/) join cf join /tf Set

 %% this alternative code uses a temporary file
 % tmpnam (.sli) join /tf Set

 % tf (w) file /t Set

 %% this alternative code uses a string stream
 osstream pop /t Set


 % write header to test file
 t 
  (true [\n\n) print ;


 % extract invariants from .hlp file and 
 % write to test file.
 false /copystate Set
 f (r) file
 { 
  getline
  not {close exit} if
  /Line Set

  SimpleKeyword Line 1 0 regexec 0 eq
  {false /copystate Set } if pop

  ReferencingKeyword Line 1 0 regexec 0 eq
  {false /copystate Set } if pop

  copystate 
  {
   t Line print (\n) print ;
  }
  if

  InvariantsKeyword Line 1 0 regexec 0 eq
  {true /copystate Set } if pop


 }
 loop

 % write footer to test file
 %
 t (] EvaluateLiteralInfixes {and} Fold\n) print ;

 %% close new test file and execute
 % t close
 % tf run

 %% alternative version with string stream
 t str isstream pop cvx exec

} def



/** @BeginDocumentation
Name: apropos - Search the command index for a regular expression.

Synopsis: (regexp) apropos -> -
          /regexp  apropos -> -


Description:
Apropos prints out all lines of the helpindex that match the regular
expression. The regular expression can be a simple string.
The search is case invariant. Apropos uses extended regular
expressions.

Parameters:
  regexp: Regular expression, either as a string or literal.

Examples:
  SLI ] /apropos apropos
  apropos              Search the command index for a regular expression.
  
  SLI ] /Apropos apropos
  apropos              Search the command index for a regular expression.
  
  SLI ] /Express* apropos
  apropos              Search the command index for a regular expression.
  EvaluateLiteralInfixes Evaluates an array of infix expressions
  ExecMath             execute a math expression.
  grep                 extract lines matching a regular expression pattern
  regcomp              Create a regular expression
  regexec              compare string and regular expression
  testsuite::test_iaf_psp_peak test of closed form expression for peak
  ToMathematicaExpression converts SLI data to Mathematica input
  
  SLI ] (regular expression) apropos
  apropos              Search the command index for a regular expression.
  regcomp              Create a regular expression
  regexec              compare string and regular expression
  
  SLI ] /DoWhatIWant apropos
  DoWhatIWant: nothing appropriate.

Diagnostics:
Raises /CannotConvertToRegexp if the expression cannot be converted
to a regular expression (see :regerror).
Raises /FileNotFound if the help index file cannot be found.

Author: R Kupper

FirstVersion: 2008-jul-15

SeeAlso: helpindex, help, which, regcomp
*/
/apropos[/stringtype /e]
{  
  /flags
  regexdict/REG_ICASE :: 
  regexdict/REG_EXTENDED :: add 
  def    

  e flags regcomp /regexp Set

  % open the helpindex text file:
  /helpindexfile HelpRoot (/) join TextIndexFilename join def

  helpindexfile ifstream not
  {
    M_ERROR (apropos) (Cannot find the helpindex file. I thought it was here: ) helpindexfile join (. Is your installation broken?) join message
    funcname /FileNotFound raiseerror
  } if

  /found false def  

  {
    getline not {exit} if
    /line Set
    regexp line regex_find
    {
      line =
      /found true def      
    } if
  } loop
  pop % the stream  
  
  found not
  {
    e =only (: nothing appropriate.) =
  } if

} SLIFunctionWrapper

/apropos[/literaltype] {cvs apropos} def


/** @BeginDocumentation
Name: which - Display the name of a command's source file.

Synopsis: /command which -> 

Description:
"which" displays the name of the file containing the documentation
header for /command. This is most likely the location, where the
command was defined.

Parameters:
/command - commandname, as listed by "helpindex", including a
           possible namespace prefix (see examples)

Examples:
 /which which
 -> Source: /home/kupper/nest2/lib/sli/helpinit.sli

 /MemoryInfo which
 -> Source: /home/kupper/nest2/nestkernel/nestmodule.cpp

 /unittest::pass_or_die which
 -> Source: /home/kupper/nest2/lib/sli/unittest.sli

Diagnostics:
Raises /NoHelpInformationError if the command is undocumented.

Author: R Kupper

FirstVersion: 23-jul-2008

Availability: Standard SLI

SeeAlso: helpindex, help, apropos
*/

/which[/literaltype /c]
{
  /helpfilename c cvs HelpExtension join def
  
  helpfilename HelpSearchPath exch LocateFileNames  %Find *.hlp-File in HelpSearchPath

  dup [] eq not %Was a help file found?
  {%yes, a helpfile was found
    0 get (^[[:space:]]*Source: ) grep
    {=} forall
  }
  {%no, no helpfile was found
    pop    
    funcname /NoHelpInformationError raiseerror
  } ifelse
} SLIFunctionWrapper

