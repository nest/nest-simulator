/*
 *  test_iaf_ps_dc_t_accuracy.sli
 *
 *  This file is part of NEST.
 *
 *  Copyright (C) 2004 The NEST Initiative
 *
 *  NEST is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  NEST is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with NEST.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

 /** @BeginDocumentation
Name: testsuite::test_iaf_ps_dc_t_accuracy - test of temporal accuracy of precise integrate-and-fire neurons subject to DC current

Synopsis: (test_iaf_ps_dc_t_accuracy) run ->  comparison with analytical solution

Description:


 A DC current is injected for a finite duration. The time of the first
 spike is compared to the theoretical value for different computation
 step sizes.

 Computation step sizes are specified as base 2 values.

 The high accuracy of the neuron models is achieved by the use of
 Exact Integration [1] and an appropriate arrangement of the terms
 [2]. For small computation step sizes the accuracy at large
 simulation time decreases because of the accumulation of errors.

 The expected output is documented at the end of the script.
 Individual simulation results can be inspected by uncommented the
 call to function print_details.


Remarks:

 The script checks whether the simulator is appropriately configured.
 The script can be used to check whether the accuracy has survived optimization.

 In case the accuracy is higher than specified by IEEE arithmetics this might
 be due to the use of processor registers. The compiler option   
 -ffloat-store of the gcc compiler ensures that doubles are not stored in 
 registers.

FirstVersion: May 2005
Author: March 2009, Diesmann
References:
 [1] Rotter S & Diesmann M (1999) Exact simulation of time-invariant linear
     systems with applications to neuronal modeling. Biologial Cybernetics
     81:381-402.
 [2] Morrison A, Straube S, Plesser H E, & Diesmann M (2007) Exact Subthreshold 
     Integration with Continuous Spike Times in Discrete Time Neural Network 
     Simulations. Neural Computation 19:47--79
SeeAlso: iaf_psc_alpha_ps, iaf_psc_delta_ps, testsuite::test_iaf_ps_dc_accuracy
*/

(unittest) run
/unittest using

M_ERROR setverbosity

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Test parameters
%

-14 /min_exponent Set
[0 min_exponent -1] Range /hlist Set
5.0 /T Set
1e-13 /tolerance Set  % tolerated error [mv]

% models to be tested
[
  /iaf_psc_alpha_ps 
  /iaf_psc_delta_ps
  /iaf_psc_exp_ps
  /iaf_psc_exp_ps_lossless
  % other precise models should be tested as well
 ] 
 /models Set


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Check if configuration of simulation kernel is appropriate
%
<< 
 /tics_per_ms min_exponent neg dexp 
 /resolution 0 dexp                   % 1 ms default 
>> SetKernelStatus

GetKernelStatus /ms_per_tic get frexp

exch
{0.5 eq} assert_or_die                  % base 2 tic size?
{1 sub min_exponent leq} assert_or_die  % sufficient resolution?


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Parameters of neuron model.
%

<<
  /E_L       0.0      % resting potential in mV 
  /V_m       0.0      % initial membrane potential in mV
  /V_th     15.0      % spike threshold in mV
  /I_e    1000.0      % DC current in pA
  /tau_m    10.0      % membrane time constant in ms
  /C_m     250.0      % membrane capacity in pF
>> /params Set

params begin userdict begin


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%  Simulation at given resolution returns membrane potential 
%  at end of simulation time and difference to exact value 
%  for both implementations.
%
/SimAtResolution
{
  dup /i Set
  dexp /h Set

  ResetKernel
  << /tics_per_ms min_exponent neg dexp /resolution h >> SetKernelStatus

  models {Create dup params SetStatus} Map /neurons Set

  T Simulate

  neurons
  { [ exch /t_spike get dup t sub abs ] } Map Flatten
  i prepend
} def



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% prints detailed table of results
%
/print_details
{
  cout default 15 setprecision 

  endl endl
  (The precise spike time is ) <- t <- ( ms.) <- endl endl

  (             log_2 h) <-
  models
  {
    exch (  ) <- exch <- ( [ms]) <-
    (           error [ms]) <-
  } forall
  endl

  models length 2 mul 1 add
  {
    (----------------------) <-
  } repeat
  endl

  exch
  {
    { exch 20 setw exch <- (  ) <- } forall endl
  }
  forall 
  ;
}
def


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Perform test
%
{
  % Reference value
  (-tau_m*ln( 1.0 - (C_m*V_th)/(tau_m*I_e) )) ExecMath /t Set

  % Perform simulations across resolutions
  hlist { SimAtResolution } Map 

  dup print_details

  % select columns with timing errors, highest resolution only
  { Rest 2 Partition [/All 2] Part } Map [-1] Part
  
  % test against tolerance limit                             
  Flatten { tolerance lt } Map

  % combine results
  Flatten true exch {and} Fold
}
assert_or_die
