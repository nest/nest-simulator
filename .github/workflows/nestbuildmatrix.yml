#
# detailed syntax defined in
# https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions
#
name: "NEST CI"

on: [push, pull_request]

jobs:
  clang-format:
    runs-on: "ubuntu-22.04"
    env:
      CLANG_REQUIRE_VERSION: 17.0.4
      CLANG_FORMAT_FILE: ".clang-format"
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit
          disable-telemetry: true

      - name: "Checkout repository content"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: "Install dependencies"
        run: |
          python -m pip install --force-reinstall clang-format==${{ env.CLANG_REQUIRE_VERSION }}

      - name: "Run clang-format..."
        run: |
          files=$(find . \( -iname "*.h" -o -iname "*.c" -o -iname "*.cc" -o -iname "*.cpp" \) -not -path "./thirdparty/*")
          diff -u <(cat ${files}) <(clang-format ${files})

  shellcheck:
    runs-on: "ubuntu-22.04"
    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: "Install Linux system dependencies"
        run: |
          sudo apt-get update
          sudo apt-get install shellcheck

      - name: "Run shellcheck..."
        run: |
          shellcheck --version
          find . -iname "*.sh" -o -iname "*.sh.in" | xargs shellcheck

  pre-commit-hooks:
    runs-on: "ubuntu-22.04"
    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: "Set up Python 3.x"
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: 3.9

      - name: "Install dependencies"
        run: |
          pip install pre-commit

      - name: "Run pre-commit checks..."
        run: |
          pre-commit run --all-files

  no-crlf:
    # While pre-commit-hook mixed-line-endings could check for this, it would
    # be incompatible with "git smudge", as users may decide to use any
    # formatting in their editor consistently.
    # https://github.com/pre-commit/pre-commit-hooks?tab=readme-ov-file#mixed-line-ending
    #
    # This check makes sure the files in the repository are always consistent
    # in their line endings, i.e. new line, and not carriage return+line feed.
    runs-on: "ubuntu-22.04"
    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: "Check all files for broken line endings…"
        run: '! find . -not -type d -exec file "{}" ";" | grep CRLF'

  cppcheck:
    runs-on: "ubuntu-22.04"
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit
          disable-telemetry: true

      - name: "Checkout repository content"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: "Install Linux system dependencies"
        run: |
          sudo apt-get update
          sudo apt-get install cppcheck

      - name: "Run cppcheck..."
        run: |
          cppcheck --enable=all --language=c++ --std=c++17 -i sli/ --suppressions-list=.cppcheck_suppressions ./

  rstcheck:
    runs-on: "ubuntu-22.04"
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit
          disable-telemetry: true

      - name: "Checkout repository content"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: "Set up Python 3.x"
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.10"

      - name: "Install dependencies"
        run: |
          pip install rstcheck

      - name: "Run rstcheck..."
        run: |
          rstcheck -r doc/

  vale:
    runs-on: "ubuntu-22.04"
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit
          disable-telemetry: true

      - name: "Checkout repository content"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: "Set up Python 3.x"
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.10"

      - name: "Install dependencies"
        run: |
          sudo apt update
          sudo apt install python3-docutils
          wget --progress=dot:mega 'https://github.com/errata-ai/vale/releases/download/v2.26.0/vale_2.26.0_Linux_64-bit.tar.gz'
          echo '956577b214ce3db8fb11483f99a183cf65673e3bd47423c6d4ebe37f085cadc7 vale_2.26.0_Linux_64-bit.tar.gz' | sha256sum -c
          tar -xzf 'vale_2.26.0_Linux_64-bit.tar.gz'

      - name: "Run vale..."
        run: |
          ./vale -v
          ./vale doc

  copyright_headers:
    runs-on: "ubuntu-22.04"
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit
          disable-telemetry: true

      - name: "Checkout repository content"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: "Set up Python 3.x"
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.10"

      - name: "Install dependencies"
        run: |
          pip install pydocstyle

      - name: "Check copyright headers..."
        run: |
          python build_support/check_copyright_headers.py

  unused_names:
    runs-on: "ubuntu-22.04"
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit
          disable-telemetry: true

      - name: "Checkout repository content"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: "Set up Python 3.x"
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.10"

      - name: "Check for unused nest::names..."
        run: |
          python build_support/check_unused_names.py

  forbidden_types:
    runs-on: "ubuntu-22.04"
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit
          disable-telemetry: true

      - name: "Checkout repository content"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: "Check for forbidden types..."
        run: |
          ./build_support/check_forbidden_types.sh

  lychee_IGNORED:
    runs-on: "ubuntu-22.04"
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit
          disable-telemetry: true

      - name: "Checkout repository content"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: "Install dependencies"
        run: |
          wget --progress=dot:mega 'https://github.com/lycheeverse/lychee/releases/download/v0.8.2/lychee-v0.8.2-x86_64-unknown-linux-gnu.tar.gz'
          echo '12c27c9b6d551aea9178080d27de75ed26125b130722153399259432f723e606  lychee-v0.8.2-x86_64-unknown-linux-gnu.tar.gz' | sha256sum -c
          tar -xzf 'lychee-v0.8.2-x86_64-unknown-linux-gnu.tar.gz'

      - name: "Run lychee..."
        continue-on-error: true
        run: "pwd; ls -l; ./lychee build_support/ doc/{*.txt,*.md,htmldoc} examples/ lib* models/ nest* pynest/ testsuite/ *.md"
        # TODO: doc/auto_examples and doc/models need to be added here, but exists only after a `make html`
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  pydocstyle:
    runs-on: "ubuntu-22.04"
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit
          disable-telemetry: true

      - name: "Checkout repository content"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: "Set up Python 3.x"
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.10"

      - name: "Install dependencies"
        run: |
          pip install pydocstyle

      - name: "Run pydocstyle..."
        run: |
          pydocstyle pynest/

  mypy:
    runs-on: "ubuntu-22.04"
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit
          disable-telemetry: true

      - name: "Checkout repository content"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: "Set up Python 3.x"
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.10"

      - name: "Install dependencies"
        run: |
          pip install mypy matplotlib numpy scipy data-science-types

      - name: "Run mypy..."
        run: |
          mypy pynest/

  # pytest-linux:
  #   runs-on: "ubuntu-22.04"
  #   needs: [build_linux]
  #   env:
  #     NEST_VPATH: "build"
  #     NEST_RESULT: "result"

  #   strategy:
  #     fail-fast: true
  #     matrix:
  #       os: ["ubuntu-22.04"]
  #       cpp_compiler: ["gcc"]

  #       # available use flags (all default to "OFF"):
  #       use:
  #         - "boost, optimize, warning"  # formerly "minimal"
  #       #  - "openmp, python, gsl, ltdl, boost, optimize, warning"  # formerly "openmp_only"
  #       #  - "mpi, python, gsl, ltdl, boost, optimize, warning"  # formerly "mpi_only"
  #       #  - "openmp, mpi, python, gsl, ltdl, boost, sionlib, libneurosim, optimize, warning"  # formerly "full"

  #   steps:
  #     - name: "Download binary artifacts"
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: "build-${{ matrix.os }}-${{ matrix.cpp_compiler }}-${{ matrix.use }}"

  #     - name: "Set up Python 3.x"
  #       uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
  #       with:
  #         python-version: "3.10"

  #     - name: "Install dependencies"
  #       run: |
  #         pip install pytest pytest-cov pytest-doctestplus

  #     - name: "Run pytest..."
  #       run: |
  #         pwd
  #         ls -lisa
  #         cd "$NEST_VPATH"
  #         pwd
  #         ls -lisa
  #         pytest testsuite/pytests/

  # pytest-mac:
  #   runs-on: "macos-latest"
  #   needs: [build_macos]
  #   steps:
  #     - name: "Checkout repository content"
  #       uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
  #       with:
  #         fetch-depth: 0

  #     - name: "Set up Python 3.x"
  #       uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
  #       with:
  #         python-version: "3.10"

  #     - name: "Install dependencies"
  #       run: |
  #         pip install pytest pytest-cov pytest-doctestplus

  #     - name: "Run pytest..."
  #       run: |
  #         pytest pynest/

  pylint:
    runs-on: "ubuntu-22.04"
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit
          disable-telemetry: true

      - name: "Checkout repository content"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: "Set up Python 3.x"
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.10"

      - name: "Install dependencies"
        run: |
          pip install pylint

      - name: "Run pylint..."
        run: |
          pylint --jobs=$(nproc) pynest/ testsuite/pytests/*.py testsuite/regressiontests/*.py

  isort:
    runs-on: "ubuntu-22.04"
    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: "Run isort..."
        uses: isort/isort-action@24d8a7a51d33ca7f36c3f23598dafa33f7071326  # 1.1.1
        with:
          configuration: --profile=black --thirdparty="nest" --check-only --diff

  black:
    runs-on: "ubuntu-22.04"
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit
          disable-telemetry: true

      - name: "Checkout repository content"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: "Run black..."
        uses: psf/black@8a737e727ac5ab2f1d4cf5876720ed276dc8dc4b  # 25.1.0
        with:
          jupyter: true

  flake8:
    runs-on: "ubuntu-22.04"
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit
          disable-telemetry: true

      - name: "Checkout repository content"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: "Set up Python 3.x"
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.10"

      - name: "Install dependencies"
        run: |
          pip install flake8

      - name: "Run flake8..."
        run: |
          flake8 .

  pr-authors:
    runs-on: "ubuntu-22.04"
    if: github.event_name == 'pull_request'
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit
          disable-telemetry: true

      - name: "Checkout repository content"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: "Get PR authors from commits"
        id: pr_authors
        run: |
          # Get PR information
          PR_NUMBER="${{ github.event.pull_request.number }}"
          REPO_OWNER="${{ github.repository_owner }}"
          REPO_NAME="${{ github.event.repository.name }}"

          echo "Analyzing PR #${PR_NUMBER} in ${REPO_OWNER}/${REPO_NAME}"

          # Get commits from GitHub API
          echo "Fetching commits from GitHub API..."
          COMMITS_RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/pulls/${PR_NUMBER}/commits")

          # Check if the API call was successful
          if [ -z "$COMMITS_RESPONSE" ] || echo "$COMMITS_RESPONSE" | grep -q '"message"'; then
            echo "Error: Failed to fetch commits from GitHub API"
            echo "$COMMITS_RESPONSE"
            exit 1
          fi

          # Extract commit information using jq
          COMMITS=$(echo "$COMMITS_RESPONSE" | jq -r '.[] | "\(.sha)|\(.commit.author.name)|\(.commit.author.email)"')

          if [ -z "$COMMITS" ]; then
            echo "No commits found in PR"
            echo "authors=[]" >> $GITHUB_OUTPUT
            echo "author_count=0" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Extract unique authors (name and email pairs)
          UNIQUE_AUTHORS=$(echo "$COMMITS" | sort -u -t'|' -k2,3 | cut -d'|' -f2,3)

          # Count authors
          AUTHOR_COUNT=$(echo "$UNIQUE_AUTHORS" | wc -l)

          # Create JSON array of authors
          AUTHORS_JSON="["
          FIRST=true
          while IFS='|' read -r name email; do
            if [ "$FIRST" = true ]; then
              FIRST=falseh
            else
              AUTHORS_JSON="${AUTHORS_JSON},"
            fi
            AUTHORS_JSON="${AUTHORS_JSON}{\"name\":\"${name}\",\"email\":\"${email}\"}"
          done <<< "$UNIQUE_AUTHORS"
          AUTHORS_JSON="${AUTHORS_JSON}]"

          echo "Found ${AUTHOR_COUNT} unique author(s):"
          echo "$UNIQUE_AUTHORS" | while IFS='|' read -r name email; do
            echo "  - ${name} <${email}>"
          done

          # Output results
          echo "authors=${AUTHORS_JSON}" >> $GITHUB_OUTPUT
          echo "author_count=${AUTHOR_COUNT}" >> $GITHUB_OUTPUT

          # Also output as multiline for easy reading
          {
            echo "authors_multiline<<EOF"
            echo "$UNIQUE_AUTHORS" | while IFS='|' read -r name email; do
              echo "${name} <${email}>"
            done
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: "Fetch authorized authors from private repository"
        id: fetch_authorized_authors
        if: env.PRIVATE_REPO_TOKEN != ''
        env:
          PRIVATE_REPO_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}
        run: |
          # Configuration for nest/nest-release-tools repository
          PRIVATE_REPO_OWNER="nest"
          PRIVATE_REPO_NAME="nest-release-tools"
          AUTHORIZED_AUTHORS_FILE="data/gitlognames.yaml"

          echo "Fetching authorized authors from ${PRIVATE_REPO_OWNER}/${PRIVATE_REPO_NAME}/${AUTHORIZED_AUTHORS_FILE}"

          # Fetch the authorized authors file from private repository
          RESPONSE=$(curl -s -H "Authorization: token ${PRIVATE_REPO_TOKEN}" \
            -H "Accept: application/vnd.github.v3.raw" \
            "https://api.github.com/repos/${PRIVATE_REPO_OWNER}/${PRIVATE_REPO_NAME}/contents/${AUTHORIZED_AUTHORS_FILE}")

          # Check if the request was successful (raw API returns 404 for not found)
          if [ -z "$RESPONSE" ] || echo "$RESPONSE" | grep -q "Not Found"; then
            echo "Warning: Could not find authorized authors file at ${AUTHORIZED_AUTHORS_FILE}"
            echo "fetch_success=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Extract the content (raw content is already plain text when using v3.raw)
          AUTHORIZED_CONTENT="$RESPONSE"

          if [ -z "$AUTHORIZED_CONTENT" ]; then
            echo "Warning: Could not decode authorized authors file content"
            echo "fetch_success=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Parse authorized authors from YAML format: "Name <email>: githubhandle"
          # Extract the "Name <email>" part before the colon and store in secure temp file
          echo "$AUTHORIZED_CONTENT" | grep -v '^#' | grep -v '^$' | sed 's/:.*$//' | sort -u > /tmp/authorized_authors_secure.txt
          AUTHORIZED_COUNT=$(wc -l < /tmp/authorized_authors_secure.txt)

          echo "Found ${AUTHORIZED_COUNT} authorized author(s) (list stored securely, not exposed)"

          # Only output success status and count - never the actual names
          echo "authorized_count=${AUTHORIZED_COUNT}" >> $GITHUB_OUTPUT
          echo "fetch_success=true" >> $GITHUB_OUTPUT

      - name: "Check if PR authors are authorized"
        id: check_authorization
        if: steps.fetch_authorized_authors.outputs.fetch_success == 'true'
        run: |
          echo "Checking if PR authors are in the authorized list..."

          # Get PR authors from previous step output
          PR_AUTHORS="${{ steps.pr_authors.outputs.authors_multiline }}"

          # Create temporary file for PR authors
          echo "$PR_AUTHORS" > /tmp/pr_authors.txt

          # Find authors in PR but not in authorized list
          # Use the secure temp file created in previous step
          UNAUTHORIZED_AUTHORS=""
          UNAUTHORIZED_COUNT=0

          while IFS= read -r pr_author; do
            if [ -n "$pr_author" ]; then
              # Check if this exact author (name and email) is in authorized list
              # We need exact match of the full "Name <email>" format
              if ! grep -Fxq "$pr_author" /tmp/authorized_authors_secure.txt; then
                UNAUTHORIZED_AUTHORS="${UNAUTHORIZED_AUTHORS}${pr_author}\n"
                UNAUTHORIZED_COUNT=$((UNAUTHORIZED_COUNT + 1))
              fi
            fi
          done < /tmp/pr_authors.txt

          # Only output count and status - never store unauthorized names
          echo "unauthorized_count=${UNAUTHORIZED_COUNT}" >> $GITHUB_OUTPUT

          # Determine overall status
          if [ $UNAUTHORIZED_COUNT -eq 0 ]; then
            echo "authorization_status=success" >> $GITHUB_OUTPUT
            echo "✅ SUCCESS: All PR authors are authorized"
          else
            echo "authorization_status=failure" >> $GITHUB_OUTPUT
            echo "❌ FAILURE: Found $UNAUTHORIZED_COUNT unauthorized author(s) in this PR"
            echo "Unauthorized authors found (names not displayed for security)"

            # Check if we should fail the build (configurable via repository variable)
            FAIL_ON_UNAUTHORIZED="${{ vars.FAIL_ON_UNAUTHORIZED_AUTHORS || 'true' }}"
            if [ "$FAIL_ON_UNAUTHORIZED" = "true" ]; then
              echo "Build failed due to unauthorized authors (set FAIL_ON_UNAUTHORIZED_AUTHORS=false to disable)"
              exit 1
            else
              echo "Build continues despite unauthorized authors (FAIL_ON_UNAUTHORIZED_AUTHORS=false)"
            fi
          fi

          # Clean up temporary files for security
          rm -f /tmp/authorized_authors_secure.txt /tmp/pr_authors.txt

      - name: "Display PR authors summary"
        run: |
          echo "## PR Authors Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Total unique authors:** ${{ steps.pr_authors.outputs.author_count }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Authors:**" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.pr_authors.outputs.authors_multiline }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

          # Add authorization check results if available
          if [ "${{ steps.fetch_authorized_authors.outputs.fetch_success }}" = "true" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## Author Authorization Check" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            if [ "${{ steps.check_authorization.outputs.unauthorized_count }}" -gt 0 ]; then
              echo "❌ **FAILURE:** ${{ steps.check_authorization.outputs.unauthorized_count }} unauthorized author(s) found" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "Some authors in this PR are not in the authorized list (exact name and email match required)." >> $GITHUB_STEP_SUMMARY
              echo "Contact repository administrators for access." >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ **SUCCESS: All PR authors are authorized**" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "ℹ️ **Note:** Author authorization check skipped (private repository access not configured)" >> $GITHUB_STEP_SUMMARY
          fi

  sphinx-rtd:
    # as close as possible to the Readthedocs setup (system install cmake, pip install -r doc/requirements.txt)
    runs-on: "ubuntu-22.04"
    needs: [pydocstyle, rstcheck, vale]
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit
          disable-telemetry: true

      - name: "Checkout repository content"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: "Set up Python 3.x"
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          # Using 3.8 because Read the docs does not work with higher versions.
          # See also: https://github.com/nest/nest-simulator/pull/2744
          python-version: "3.10"

      - name: "Install dependencies"
        run: |
          sudo apt update
          pip install -r doc/requirements.txt
          # The pandoc executable, which is required, cannot be installed via pip see: https://stackoverflow.com/a/71585691
          sudo apt install pandoc

      - name: "Test-build documentation"
        run: |
          mkdir -pv build
          cd build
          cmake -Dwith-userdoc=ON -DCMAKE_INSTALL_PREFIX=../install ..
          make docs |& tee sphinx-output.log

      - name: Upload artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: "sphinx-rtd output"
          path: |
            build/sphinx-output.log
            build/doc/_build/html/

  sphinx-conda:
    # as close as possible to the suggested user docs build in the documentation
    runs-on: "ubuntu-22.04"
    if: false
    needs: [pydocstyle, rstcheck, vale]
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit
          disable-telemetry: true

      - name: "Checkout repository content"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Install Conda
        uses: conda-incubator/setup-miniconda@835234971496cad1653abb28a638a281cf32541f   # v3.2.0
        with:
          auto-update-conda: true
          python-version: "3.10"

      - name: Install conda dependencies
        shell: bash -l {0}
        run: |
          conda info
          conda env create -p conda

      - name: "Test-build documentation"
        shell: bash -l {0}
        run: |
          conda activate conda/
          mkdir -pv build
          cd build
          cmake -DCMAKE_INSTALL_PREFIX=../install ..
          make html |& tee sphinx-output.log

      - name: Upload artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          path: |
            build/sphinx-output.log
            build/doc/_build/html/

  build_linux:
    if: ${{ !contains(github.event.head_commit.message, 'ci skip') }}
    runs-on: ${{ matrix.os }}
    needs: [clang-format, mypy, copyright_headers, unused_names, forbidden_types, pylint, isort, black, flake8, shellcheck, pre-commit-hooks, cppcheck, no-crlf]
    env:
      CXX_FLAGS: "-pedantic -Wextra -Woverloaded-virtual -Wno-unknown-pragmas"
      NEST_VPATH: "build"
      NEST_RESULT: "result"

    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-22.04"]
        cpp_compiler: ["gcc"]

        # available use flags (all default to "OFF"):
        # openmp, mpi, python, gsl, ltdl, boost, sionlib, libneurosim, optimize, warning, userdoc, music, readline
        use:
          - "optimize, warning"
          - "boost, optimize, warning"
          - "openmp, python, gsl, ltdl, boost, optimize, warning"
          - "mpi, python, gsl, ltdl, boost, optimize, warning"
          - "openmp, mpi, python, gsl, ltdl, boost, hdf5, sionlib, libneurosim, optimize, warning, music, detailed-timers, threaded-timers, mpi-sync-timer"

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit
          disable-telemetry: true

      - name: "Checkout repository content"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: "Set up Python 3.x"
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.10"

      - name: "Restore apt cache"
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        env:
          cache-name: "apt-cache"
        with:
          path: |
            !/var/cache/apt/archives/lock
            !/var/cache/apt/archives/partial
            /var/cache/apt
          key: ${{ runner.os }}-system-${{ env.cache-name }}-${{ hashFiles('**/environment.yml') }}
          restore-keys: |
            ${{ runner.os }}-system-${{ env.cache-name }}-
            ${{ runner.os }}-system-

      - name: "Install Linux system dependencies"
        run: |
          # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md
          sudo apt-get update
          sudo apt-get install \
                           ccache \
                           python3-all-dev \
                           jq \
                           libpcre3 libpcre3-dev \
                           pkg-config
          # not sure why these would be required:
          #   sudo apt-get install tcl8.6 tcl8.6-dev tk8.6-dev
          sudo ldconfig

      - name: "Install Readline dependencies"
        if: "${{ contains(matrix.use, 'readline') }}"
        run: "sudo apt-get install libreadline6-dev libncurses5-dev"

      - name: "Install LTDL dependencies"
        if: "${{ contains(matrix.use, 'ltdl') }}"
        run: "sudo apt-get install libltdl-dev"

      - name: "Install Boost dependencies"
        if: "${{ contains(matrix.use, 'boost') }}"
        run: "sudo apt-get install libboost-filesystem-dev libboost-regex-dev libboost-wave-dev libboost-python-dev libboost-program-options-dev libboost-test-dev"

      - name: "Install OpenMPI development dependencies"
        if: "${{ contains(matrix.use, 'mpi') }}"
        run: "sudo apt-get install openmpi-bin libopenmpi-dev"

      - name: "Install GSL system dependencies"
        if: "${{ contains(matrix.use, 'gsl') }}"
        run: "sudo apt-get install libgsl0-dev"

      - name: "Install HDF5 system dependencies"
        if: "${{ contains(matrix.use, 'hdf5') }}"
        run: "sudo apt-get install libhdf5-dev"

      - name: "Restore ccache"
        # Using CCache to re-use compiled objects from prior runs that have the same
        # source (hashed), compiler (mtime+size) and compile flags.
        env:
          cache-name: "ccache"
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: |
            $HOME/.ccache
            .ccache
            /home/runner/.ccache
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ matrix.cpp_compiler }}-${{ matrix.NEST_BUILD_TYPE }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-${{ matrix.cpp_compiler }}-${{ matrix.NEST_BUILD_TYPE }}
            ${{ runner.os }}-${{ env.cache-name }}-${{ matrix.cpp_compiler }}
            ${{ runner.os }}-${{ env.cache-name }}
            ${{ runner.os }}

      - name: "Restore pip cache"
        env:
          cache-name: "pip-cache"
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: |
            /opt/hostedtoolcache/Python/**/site-packages/*
            $HOME/.cache/pip
          key: ${{ runner.os }}-python-${{ env.cache-name }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ env.cache-name }}-
            ${{ runner.os }}-python-

      - name: "Install Python dependencies"
        run: |
          python -m pip install --upgrade pip setuptools
          python -m pip install --force-reinstall --upgrade cython  # this finds a broken preinstall if not explicitly forced
          python -c "import setuptools; print('package location:', setuptools.__file__)"
          pip list

      - name: "Install Python test dependencies"
        # These could go to a separate venv…
        run: |
          python -m pip install 'junitparser>=2' pytest pytest-timeout pytest-xdist terminaltables
          python -m pip install numpy scipy pandas matplotlib
          test \! -e "=2"   # assert junitparser is correctly quoted and '>' is not interpreted as shell redirect
          python -c "import pytest; print('package location:', pytest.__file__)"

      - name: "Install Python doc dependencies"
        run: "python -m pip install pandoc"

      - name: "Install Python mpi dependencies"
        if: "${{ contains(matrix.use, 'mpi') }}"
        run: "python -m pip install --force-reinstall --upgrade mpi4py"

      - name: "Install h5py"
        if: "${{ contains(matrix.use, 'hdf5') }}"
        run: |
          python -m pip install --force-reinstall --upgrade --no-binary=h5py h5py

      - name: "Install MUSIC"
        if: "${{ contains(matrix.use, 'music') }}"
        run: |
          chmod +x build_support/install_music.sh
          ./build_support/install_music.sh

      - name: "Install SIONlib"
        if: "${{ contains(matrix.use, 'sionlib') }}"
        run: |
          chmod +x build_support/install_sionlib.sh
          ./build_support/install_sionlib.sh

      - name: "Install LibNeurosim – WARNING WARNING NO PROPER PYTHON INSTALL!"
        if: "${{ contains(matrix.use, 'libneurosim') }}"
        run: |
          chmod +x build_support/install_csa-libneurosim.sh
          PYLIB_DIR="$(python3 -c "import sysconfig; print(sysconfig.get_path('include'))" | sed 's/include/lib/')"
          ./build_support/install_csa-libneurosim.sh $PYLIB_DIR

      - name: "Uninstall Boost development libraries"
        if: "${{ ! contains(matrix.use, 'boost') }}"
        run: |
          apt list --installed 'libboost*'
          sudo apt-get remove --autoremove 'libboost*-dev'

      - name: "List available packages"
        if: "${{ ! contains(matrix.use, 'boost') }}"
        run: |
          gcc --version
          python --version
          echo "INSTALLED PYTHON PACKAGES:"
          pip list
          echo "INSTALLED BOOST PACKAGES:"
          dpkg -l 'libboost*' | grep "^ii" || true
          echo "INSTALLED BOOST HEADERS:"
          dpkg -l 'libboost*-dev' | grep "^ii"  || true
          echo "LIST HAS TO BE ZERO"
          test -z "$(dpkg -l 'libboost*-dev' | grep "^ii")"

      - name: "Configure NEST build"
        env:
          CMAKE_C_COMPILER_LAUNCHER: ccache
          CMAKE_CXX_COMPILER_LAUNCHER: ccache
        run: |
          mkdir -pv "$NEST_VPATH/reports" "$NEST_RESULT"

          if [ "$xNEST_BUILD_COMPILER" = "CLANG" ]; then
              export CC=clang-11
              export CXX=clang++-11
          fi
          export CXX_FLAGS="-pedantic -Wextra -Wno-unknown-pragmas -D_GLIBCXX_ASSERTIONS"

          cd "$NEST_VPATH"
          cmake \
              -DCMAKE_INSTALL_PREFIX="$NEST_RESULT" \
              -DCMAKE_CXX_FLAGS="$CXX_FLAGS" \
              -Dwith-optimize=${{ contains(matrix.use, 'optimize') && 'ON' || 'OFF' }} \
              -Dwith-warning=${{ contains(matrix.use, 'warning') && 'ON' || 'OFF' }} \
              -Dwith-boost=${{ contains(matrix.use, 'boost') && 'ON' || 'OFF' }} \
              -Dwith-openmp=${{ contains(matrix.use, 'openmp') && 'ON' || 'OFF' }} \
              -Dwith-mpi=${{ contains(matrix.use, 'mpi') && 'ON' || 'OFF' }} \
              -Dwith-python=${{ contains(matrix.use, 'python') && 'ON' || 'OFF' }} \
              -Dwith-gsl=${{ contains(matrix.use, 'gsl') && 'ON' || 'OFF' }} \
              -Dwith-ltdl=${{ contains(matrix.use, 'ltdl') && 'ON' || 'OFF' }} \
              -Dwith-readline=${{ contains(matrix.use, 'readline') && 'ON' || 'OFF' }} \
              -Dwith-hdf5=${{ contains(matrix.use, 'hdf5') && 'ON' || 'OFF' }} \
              -Dwith-sionlib=${{ contains(matrix.use, 'sionlib') && '$HOME/.cache/sionlib.install' || 'OFF' }} \
              -Dwith-libneurosim=${{ contains(matrix.use, 'libneurosim') && '$HOME/.cache/libneurosim.install' || 'OFF' }} \
              -Dwith-music=${{ contains(matrix.use, 'music') && '$HOME/.cache/music.install' || 'OFF' }} \
              -Dwith-threaded-timers=${{ contains(matrix.use, 'threaded-timers') && 'ON' || 'OFF' }} \
              -Dwith-detailed-timers=${{ contains(matrix.use, 'detailed-timers') && 'ON' || 'OFF' }} \
              -Dwith-mpi-sync-timer=${{ contains(matrix.use, 'mpi-sync-timer') && 'ON' || 'OFF' }} \
              ..

      - name: "Add GCC problem matcher"
        run: |
          echo "::add-matcher::gcc_problem_matcher.json"

      - name: "Build NEST"
        run: |
          cd "$NEST_VPATH"
          env
          make VERBOSE=1

      - name: "Remove GCC problem matcher"
        run: |
          echo "::remove-matcher owner=gcc-problem-matcher::"

      - name: "Install NEST"
        run: |
          cd "$NEST_VPATH"
          make install

      - name: "Initialize Matplotlibrc"
        run: |
          # initialize matplotlib backend
          mkdir -pv $HOME/.matplotlib
          echo "backend : svg" > $HOME/.matplotlib/matplotlibrc

      - name: "Run NEST testsuite"
        env:
          DO_TESTS_SKIP_TEST_REQUIRING_MANY_CORES: ${{ contains(matrix.use, 'mpi') && contains(matrix.use, 'openmp') }}
        run: |
          pwd
          cd "$NEST_VPATH"
          chmod -v u+x ${NEST_RESULT}/share/nest/testsuite/do_tests.sh
          make VERBOSE=1 installcheck

      - name: "Upload install and test results"
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: always()
        with:
          name: "build-logs-${{ matrix.os }}-${{ matrix.cpp_compiler }}-${{ matrix.use }}"
          path: |
            build/install_manifest.txt
            build/test_report_*/

  build_macos:
    if: ${{ !contains(github.event.head_commit.message, 'ci skip') }}
    runs-on: ${{ matrix.os }}
    needs: [clang-format, mypy, copyright_headers, unused_names, forbidden_types, pylint, isort, black, flake8, shellcheck, pre-commit-hooks, cppcheck, no-crlf]
    env:
      CXX_FLAGS: "-pedantic -Wextra -Woverloaded-virtual -Wno-unknown-pragmas"
      NEST_VPATH: "build"
      NEST_RESULT: "result"

    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]
        cpp_compiler: ["clang"]

        # available use flags (all default to "OFF"):
        # openmp, mpi, python, gsl, ltdl, boost, hdf5, sionlib, libneurosim, optimize, warning, userdoc, music
        use:
          - "openmp, mpi, python, gsl, ltdl, boost, hdf5, optimize, warning"

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit
          disable-telemetry: true

      - name: "Checkout repository content"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: "Set up Python 3.x"
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: 3.12

      - name: "Install MacOS system dependencies"
        run: |
          brew install coreutils gsl open-mpi libomp automake autoconf libtool boost hdf5

      - name: "Restore pip cache"
        env:
          cache-name: "pip-cache"
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: |
            /opt/hostedtoolcache/Python/**/site-packages/*
            $HOME/.cache/pip
          key: ${{ runner.os }}-python-${{ env.cache-name }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ env.cache-name }}-
            ${{ runner.os }}-python-

      - name: "Install Python dependencies"
        run: |
          python -m pip install --upgrade pip setuptools
          python -c "import setuptools; print('package location:', setuptools.__file__)"
          python -m pip install --force-reinstall --upgrade scipy 'junitparser>=2' numpy pytest pytest-timeout pytest-xdist mpi4py h5py cython matplotlib terminaltables pandoc pandas
          test \! -e "=2"   # assert junitparser is correctly quoted and '>' is not interpreted as shell redirect
          python -c "import pytest; print('package location:', pytest.__file__)"
          pip list

      - name: "Configure NEST build"
        run: |
          mkdir -pv "$NEST_VPATH/reports" "$NEST_RESULT"

          cd "$NEST_VPATH"
          cmake \
              -DCMAKE_INSTALL_PREFIX="$NEST_RESULT" \
              -DCMAKE_CXX_FLAGS="$CXX_FLAGS" \
              -Dwith-optimize=${{ contains(matrix.use, 'optimize') && 'ON' || 'OFF' }} \
              -Dwith-warning=${{ contains(matrix.use, 'warning') && 'ON' || 'OFF' }} \
              -Dwith-boost=${{ contains(matrix.use, 'boost') && 'ON' || 'OFF' }} \
              -Dwith-openmp=${{ contains(matrix.use, 'openmp') && '$(brew --prefix libomp)' || 'OFF' }} \
              -Dwith-mpi=${{ contains(matrix.use, 'mpi') && 'ON' || 'OFF' }} \
              -Dwith-python=${{ contains(matrix.use, 'python') && 'ON' || 'OFF' }} \
              -Dwith-gsl=${{ contains(matrix.use, 'gsl') && 'ON' || 'OFF' }} \
              -Dwith-ltdl=${{ contains(matrix.use, 'ltdl') && 'ON' || 'OFF' }} \
              -Dwith-readline=${{ contains(matrix.use, 'readline') && 'ON' || 'OFF' }} \
              -Dwith-hdf5=${{ contains(matrix.use, 'hdf5') && 'ON' || 'OFF' }} \
              -Dwith-sionlib=${{ contains(matrix.use, 'sionlib') && '$HOME/.cache/sionlib.install' || 'OFF' }} \
              -Dwith-libneurosim=${{ contains(matrix.use, 'libneurosim') && '$HOME/.cache/libneurosim.install' || 'OFF' }} \
              -Dwith-music=${{ contains(matrix.use, 'music') && '$HOME/.cache/music.install' || 'OFF' }} \
              ..

      - name: "Add GCC problem matcher"
        run: |
          echo "::add-matcher::gcc_problem_matcher.json"

      - name: "Build NEST"
        run: |
          cd "$NEST_VPATH"
          env
          make VERBOSE=1

      - name: "Remove GCC problem matcher"
        run: |
          echo "::remove-matcher owner=gcc-problem-matcher::"

      - name: "Install NEST"
        run: |
          cd "$NEST_VPATH"
          make install

      - name: "Initialize Matplotlibrc"
        run: |
          # initialize matplotlib backend
          mkdir -pv $HOME/.matplotlib
          echo "backend : svg" > $HOME/.matplotlib/matplotlibrc

      - name: "Run NEST testsuite"
        run: |
          pwd
          cd "$NEST_VPATH"
          chmod -v u+x ${NEST_RESULT}/share/nest/testsuite/do_tests.sh
          make VERBOSE=1 installcheck

      - name: "Upload install and test results"
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: ${{ always() }}
        with:
          name: "${{ matrix.NEST_BUILD_TYPE }}-build-logs-${{ matrix.os }}-${{ matrix.cpp_compiler }}"
          path: |
            build/install_manifest.txt
            build/test_report_*/
