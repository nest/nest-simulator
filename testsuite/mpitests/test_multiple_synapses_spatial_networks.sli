/*
 *  test_multiple_synapses_spatial_networks.sli
 *
 *  This file is part of NEST.
 *
 *  Copyright (C) 2004 The NEST Initiative
 *
 *  NEST is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  NEST is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with NEST.  If not, see <http://www.gnu.org/licenses/>.
 *
 */


/** @BeginDocumentation
    Name: testsuite::test_multiple_synapses_spatial_networks - Test that ConnectLayer with list of synapse dictionaries
                                                               use the correct values when connecting

    Synopsis: (test_multiple_synapses_spatial_networks) run -> -

    Description:
    test_multiple_synapses_spatial_networks.sli checks that when ConnectLayer is given a list of synapse dictionaries,
    the given values are used when we have more than one process.

    Author: Stine Brekke Vennemo
    FirstVersion: June 2020
*/

(unittest) run
/unittest using

/collocated_synapse_params
  [<< /weight -3. /delay 1.0 /synapse_model /static_synapse >>
   << /weight  3. /delay 1.3 /synapse_model /static_synapse >>
   << /weight  2. /delay 1.9 /synapse_model /stdp_synapse >> ]
def

/pos
  [-0.25 0.25 0.25] Range
  {
    /x Set
    [0.25 -0.25 -0.25] Range
    {
      x exch 2 arraystore
    }
    Map
  }
  Map
  1 Flatten
def

% Set number of sources and targets according to number of positions
/num_src pos length def
/num_trgt pos length def
/num_conns 4 def % connections per target

% to reduce data to be transported, reduce every value to max three chars
/:compact_form
{
  { cvs dup length 3 gt { 3 Take } if } Map
}
def

[1 2 4]
{
  /layer_spec
  << /positions pos
    /extent [1.25 1.25]
    /elements /iaf_psc_alpha
  >> def

  /layer_src layer_spec CreateLayer def
  /layer_trg layer_spec CreateLayer def

  layer_src layer_trg
  <<
    /connection_type /pairwise_bernoulli_on_target /number_of_connections num_conns % 4 connections per target
    /synapse_parameters collocated_synapse_params
  >>
  ConnectLayers

  /weight_delay_syn [] def
  << >> GetConnections /conns Set
  conns GetStatus
  {
    [[/weight /delay /synapse_model]] get /wdsm Set

    weight_delay_syn wdsm append Flatten /weight_delay_syn Set
  } forall

  weight_delay_syn :compact_form
}
{
  /results Set
  /cumulative_res_list [] def

  % Create a reference list with the values we expect (values taken from syn_spec list above).
  /reference_list [] def
  [num_conns num_trgt mul] Range
  {
    % Connection order changed behind the scenes, stdp_synapse connected last. We therefore need to manually
    % build reference list
    ;
    collocated_synapse_params [1] Take dup dup
      /weight get /w_1 Set
      /delay get /d_1 Set
      /synapse_model get /sm_1 Set
    collocated_synapse_params [2] Take dup dup
      /weight get /w_2 Set
      /delay get /d_2 Set
      /synapse_model get /sm_2 Set
    reference_list [w_1 d_1 sm_1 w_2 d_2 sm_2] join /reference_list Set
  } forall

  collocated_synapse_params [3] Take dup dup
    /weight get /w_3 Set
    /delay get /d_3 Set
    /synapse_model get /sm_3 Set
  /reference_list reference_list [num_conns num_trgt] [w_3 d_3 sm_3] LayoutArray Flatten append Flatten def

  % Go through results from different processes and append them to eachother.
  results 0 get
  {
    /mpi_res Set

    mpi_res
    {
      cumulative_res_list exch append /cumulative_res_list Set
    } forall
  } forall

  % Also check that the cumulative result list contains all variables we expect.
  cumulative_res_list reference_list :compact_form eq
}
distributed_collect_assert_or_die
