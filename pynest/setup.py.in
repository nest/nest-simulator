# -*- coding: utf-8 -*-
#
# setup.py
#
# This file is part of NEST.
#
# Copyright (C) 2004 The NEST Initiative
#
# NEST is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# NEST is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NEST.  If not, see <http://www.gnu.org/licenses/>.

from setuptools import setup, Extension
from setuptools.command.build_ext import build_ext
import os

wheel_build = os.getenv("NEST_CMAKE_WHEELBUILD")

class cmake_extension(Extension):
    def __init__(self, name):
        Extension.__init__(self, name, sources=[])

wheel_kwargs = {} if not wheel_build else dict(
    cmdclass={
        'build_ext': cmake_build
    },
    ext_modules=[cmake_extension('nest')],
)

class cmake_build(build_ext):
    def run(self):
        # The path where CMake will be configured and *hehe* NEST will be built.
        build_directory = os.path.abspath(self.build_temp)
        # The path where the package will be copied after building.
        lib_directory = os.path.abspath(self.build_lib)
        # The path where the Python package will be compiled.
        source_path = build_directory + '/python/nest'
        # Where to copy the package after it is built, so that whatever the next phase is
        # can copy it into the target 'prefix' path.
        dest_path = lib_directory + '/nest'

        if not os.path.exists(self.build_temp):
            os.makedirs(self.build_temp)

        print('-'*20, 'Configure CMake')
        p = os.path.abspath(os.get_cwd())
        subprocess.check_call(['cmake . -DCMAKE_INSTALL_PREFIX=' + p],
                              cwd=self.build_temp)

        print('-'*20, 'Build')
        subprocess.check_call(['make install'],
                              cwd=self.build_temp)

        # Copy from build path to some other place from whence it will later be installed.
        # ... or something like that
        # ... setuptools is an enigma monkey patched on a mystery
        if not os.path.exists(dest_path):
            os.makedirs(dest_path, exist_ok=True)
        self.copy_tree(source_path, dest_path)


setup(
    name = 'nest-simulator',
    version = '@NEST_VERSION@@githash@',
    description = 'Python bindings for NEST',
    author = 'The NEST Initiative',
    url = 'https://www.nest-simulator.org',
    license = 'GPLv2+',
    packages = ['nest', 'nest.lib'],
    install_requires = ['numpy', 'scipy'],
    extras_require = {'test': ['junitparser', 'matplotlib', 'nose']},
    classifiers = [
        'Development Status :: 6 - Mature',
        'Programming Language :: Python :: 3.8',
        'Programming Language :: Python :: 3.9',
        'Intended Audience :: Science/Research',
        'Topic :: Scientific/Engineering',
        'Topic :: Scientific/Engineering :: Artificial Intelligence',
    ],
    python_requires = '>=3.8, <4',
    keywords = (",".join([
        'nest',
        'simulator',
        'neuroscience',
        'neural',
        'neuron',
        'network',
        'ai',
        'spike',
        'spiking'
    ])),
    project_urls = {
        'Homepage': 'https://www.nest-simulator.org/',
        'Bug Reports': 'https://github.com/nest/nest-simulator/issues',
        'Source': 'https://github.com/nest/nest-simulator',
        'Documentation': 'https://nest-simulator.readthedocs.io/'
    },
    **wheel_kwargs,
)
